("Collatz" Collatz bv8_TCC1 0 (bv8_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (bv8 subtype "1001" "naturalnumbers.below(exp2.exp2(4))")))("Collatz" Collatz bv3_TCC1 0 (bv3_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (bv3 subtype "110" "naturalnumbers.below(exp2.exp2(3))")))("Collatz" Collatz bvithdigit_TCC1 0 (bvithdigit_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (bvithdigit subtype "Collatz.x" "naturalnumbers.below(4)")))("Collatz" Collatz iter_test_TCC1 0 (iter_test_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (iter_test subtype "for_iterate[real].for(0, 4, 1, restrict[[int, real], [integers.subrange(0, 4), real], numfield].restrict(LAMBDA (i: integers.int, a: reals.real): number_fields.*(a, Collatz.x)))" "int")))("Collatz" Collatz totaltrue_TCC1 0 (totaltrue_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (totaltrue subtype "for_iterate[real].for(0, 4, 1, restrict[[int, real], [integers.subrange(0, 4), real], numfield].restrict(LAMBDA (i: integers.int, a: reals.real): number_fields.*(a, Collatz.bvtoari(Collatz.x))))" "int")))("Collatz" Collatz totalone_TCC1 0 (totalone_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (totalone subtype "Collatz.i" "nat")))("Collatz" Collatz totalone_TCC2 0 (totalone_TCC2-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (totalone subtype "for_iterate[real].for(0, 4, 1, restrict[[int, real], [integers.subrange(0, 4), real], numfield].restrict(LAMBDA (i: integers.int, a: reals.real): (number_fields.+)(a, 1)))" "int")))("Collatz" Collatz is_power_of_two_TCC1 0 (is_power_of_two_TCC1-1 nil 3927555792 ("" (subtype-tcc) nil nil) nil nil (is_power_of_two subtype "Collatz.x" "naturalnumber")))("Collatz" Collatz is_power_of_two_TCC2 0 (is_power_of_two_TCC2-1 nil 3927555792 ("" (termination-tcc) nil nil) nil nil (is_power_of_two termination "Collatz.is_power_of_two(number_fields./(Collatz.x, 2))" "nil")))("Collatz" Collatz ymultiplecases_TCC1 0 (ymultiplecases_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (ymultiplecases subtype "Collatz.i" "naturalnumbers.below(Collatz.bvlength)")))("Collatz" Collatz ycases_TCC1 0 (ycases_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (ycases subtype "Collatz.x" "posnat")))("Collatz" Collatz iteratebv_TCC1 0 (iteratebv_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (iteratebv subtype "Collatz.k" "naturalnumbers.below(Collatz.bvlength)")))("Collatz" Collatz iteratebv_TCC2 0 (iteratebv_TCC2-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (iteratebv subtype "(number_fields./(Collatz.x, 2))" "int")))("Collatz" Collatz bv4_TCC1 0 (bv4_TCC1-1 nil 3928954593 ("" (subtype-tcc) nil nil) nil nil (bv4 subtype "101" "naturalnumbers.below(exp2.exp2(4))")))("algorithm2" algorithm2 case1_TCC1 0 (case1_TCC1-1 nil 3929220426 ("" (subtype-tcc) nil nil) nil nil (case1 subtype "((number_fields.-)(algorithm2.j, 2))" "nat")))("algorithm2" algorithm2 casemnot0_TCC1 0 (casemnot0_TCC1-1 nil 3929220426 ("" (subtype-tcc) nil nil) nil nil (casemnot0 subtype "((number_fields.-)((number_fields.-)(algorithm2.j, 3), algorithm2.m))" "nat")))("algorithm2" algorithm2 casemnot0_TCC2 0 (casemnot0_TCC2-1 nil 3929220426 ("" (subtype-tcc) nil nil) nil nil (casemnot0 subtype "(algorithm2.m)" "nat")))("algorithm2" algorithm2 casemnot0_TCC3 0 (casemnot0_TCC3-1 nil 3929220426 ("" (subtype-tcc) nil nil) nil nil (casemnot0 subtype "((number_fields.-)((number_fields.-)(algorithm2.j, 3), algorithm2.m))" "nat")))("algorithm2" algorithm2 casemnot0_TCC4 0 (casemnot0_TCC4-1 nil 3929220426 ("" (subtype-tcc) nil nil) nil nil (casemnot0 subtype "(algorithm2.m)" "nat")))("Verification" Verification finalcases_axiom_TCC1 0 (finalcases_axiom_TCC1-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (finalcases_axiom subtype "(number_fields./(Verification.x, 2))" "int")))("Verification" Verification finalcases_axiom 0 (finalcases_axiom-1 nil 3930321651 ("" (skosimp*) (("" (grind) nil nil)) nil) ((length def-decl "nat" list_props nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (even? const-decl "bool" integers nil) (odd? const-decl "bool" integers nil) (final_cases const-decl "bool" Verification nil) (y_determination const-decl "bool" Verification nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_times_int_is_int application-judgement "int" integers nil)) shostak))("Verification" Verification verification_implies_integer_TCC1 0 (verification_implies_integer_TCC1-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (verification_implies_integer subtype "Verification.stringreader(Verification.x, Verification.str)" "rational")))("Verification" Verification verification_y_calculation_lemma_TCC1 0 (verification_y_calculation_lemma_TCC1-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (verification_y_calculation_lemma subtype "Verification.y_calculation(Verification.x, Verification.str)" "int")))("Verification" Verification verification_y_calculation_lemma_TCC2 0 (verification_y_calculation_lemma_TCC2-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (verification_y_calculation_lemma subtype "(number_fields.-)(length(Verification.str), 2)" "nat")))("Verification" Verification stringreader_recursive_lemma_TCC1 0 (stringreader_recursive_lemma_TCC1-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (stringreader_recursive_lemma subtype "Verification.y_calculation(Verification.x, Verification.str)" "int")))("Verification" Verification stringreader_recursive_lemma_TCC2 0 (stringreader_recursive_lemma_TCC2-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (stringreader_recursive_lemma subtype "(number_fields.-)(length(Verification.str), 2)" "nat")))("Verification" Verification case_2_1_TCC1 0 (case_2_1_TCC1-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (case_2_1 subtype "Verification.k" "nat")))("Verification" Verification case_2_1 0 (case_2_1-1 nil 3930322340 ("" (skeep) (("" (grind) nil nil)) nil) ((even_times_int_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (final_cases const-decl "bool" Verification nil) (odd? const-decl "bool" integers nil) (even? const-decl "bool" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (length def-decl "nat" list_props nil)) shostak))("Verification" Verification case_2_2 0 (case_2_2-1 nil 3930322355 ("" (skosimp*) (("" (grind) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (final_cases const-decl "bool" Verification nil) (even? const-decl "bool" integers nil) (odd? const-decl "bool" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (length def-decl "nat" list_props nil)) shostak))("Verification" Verification case_2_3 0 (case_2_3-1 nil 3930322384 ("" (skosimp*) (("" (grind) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (final_cases const-decl "bool" Verification nil) (even? const-decl "bool" integers nil) (odd? const-decl "bool" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (length def-decl "nat" list_props nil)) shostak))("Verification" Verification validate_string_TCC1 0 (validate_string_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil nil (validate_string subtype "Verification.k" "nat")))("Verification" Verification case1_to_finalcases_TCC1 0 (case1_to_finalcases_TCC1-1 nil 3930323380 ("" (subtype-tcc) nil nil) nil nil (case1_to_finalcases subtype "Verification.k" "nat")))("Verification" Verification finalcases_to_ydetermination_TCC1 0 (finalcases_to_ydetermination_TCC1-1 nil 3930322340 ("" (subtype-tcc) nil nil) nil nil (finalcases_to_ydetermination subtype "(number_fields./(Verification.x, 2))" "int")))("Verification" Verification finalcases_to_verification 0 (finalcases_to_verification-1 nil 3930396788 ("" (skeep) (("" (expand verification) (("" (expand y_determination) (("" (grind) nil nil)) nil)) nil)) nil) ((verification def-decl "bool" Verification nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (length def-decl "nat" list_props nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (even? const-decl "bool" integers nil) (odd? const-decl "bool" integers nil) (final_cases const-decl "bool" Verification nil) (validate_string const-decl "bool" Verification nil) (y_calculation const-decl "real" Verification nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (y_determination const-decl "bool" Verification nil) (int_times_int_is_int application-judgement "int" integers nil)) shostak))("Verification" Verification case1_to_y_determination 0 (case1_to_y_determination-1 nil 3930323708 ("" (postpone) nil nil) nil shostak))("Verification" Verification ydetermination_to_verification 0 (ydetermination_to_verification-1 nil 3930325018 ("" (skeep) (("" (expand verification) (("" (case "NOT y_determination(x, s)") (("1" (grind) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ((verification def-decl "bool" Verification nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (character type-decl nil character_adt nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (string type-eq-decl nil strings nil) (y_determination const-decl "bool" Verification nil)) shostak))("Verification" Verification theorem12_1_TCC1 0 (theorem12_1_TCC1-1 nil 3930321651 ("" (subtype-tcc) nil nil) nil nil (theorem12_1 subtype "Verification.x" "posnat")))("Verification" Verification finalcase1_to_verification_TCC1 0 (finalcase1_to_verification_TCC1-1 nil 3930418303 ("" (subtype-tcc) nil nil) nil nil (finalcase1_to_verification subtype "Verification.len" "nat")))("Verification" Verification finalcase1_to_verification 0 (finalcase1_to_verification-1 nil 3930418303 ("" (skosimp*) (("" (expand verification) (("" (expand y_determination) (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((verification def-decl "bool" Verification nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (final_cases const-decl "bool" Verification nil) (y_calculation const-decl "real" Verification nil) (final_case_3 const-decl "bool" Verification nil) (final_case_2 const-decl "bool" Verification nil) (odd? const-decl "bool" integers nil) (validate_string const-decl "bool" Verification nil) (final_case_1 const-decl "bool" Verification nil) (even? const-decl "bool" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (length def-decl "nat" list_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (y_determination const-decl "bool" Verification nil) (int_times_int_is_int application-judgement "int" integers nil)) shostak))("Verification" Verification finalcase3_ydetcase1_to_verification_TCC1 0 (finalcase3_ydetcase1_to_verification_TCC1-1 nil 3930418932 ("" (subtype-tcc) nil nil) nil nil (finalcase3_ydetcase1_to_verification subtype "Verification.len" "nat")))("Verification" Verification finalcase2_ydetcase1_to_verification_TCC1 0 (finalcase2_ydetcase1_to_verification_TCC1-1 nil 3930418559 ("" (subtype-tcc) nil nil) nil nil (finalcase2_ydetcase1_to_verification subtype "Verification.len" "nat")))("Verification" Verification finalcase2_ydetcase1_to_verification 0 (finalcase2_ydetcase1_to_verification-1 nil 3930418559 ("" (postpone) nil nil) nil shostak))("Verification" Verification finalcase2_to_verification 0 (finalcase2_to_verification-1 nil 3930418934 ("" (skosimp*) (("" (expand verification) (("" (expand y_determination) (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((verification def-decl "bool" Verification nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (final_cases const-decl "bool" Verification nil) (y_calculation const-decl "real" Verification nil) (final_case_3 const-decl "bool" Verification nil) (final_case_1 const-decl "bool" Verification nil) (even? const-decl "bool" integers nil) (validate_string const-decl "bool" Verification nil) (final_case_2 const-decl "bool" Verification nil) (odd? const-decl "bool" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (length def-decl "nat" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (y_determination const-decl "bool" Verification nil) (int_times_int_is_int application-judgement "int" integers nil)) shostak))("Verification" Verification finalcase3_to_verification_TCC1 0 (finalcase3_to_verification_TCC1-1 nil 3930419001 ("" (subtype-tcc) nil nil) nil nil (finalcase3_to_verification subtype "Verification.len" "nat")))("Verification" Verification finalcase3_to_verification 0 (finalcase3_to_verification-1 nil 3930419001 ("" (skosimp*) (("" (expand verification) (("" (expand y_determination) (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((verification def-decl "bool" Verification nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (final_cases const-decl "bool" Verification nil) (y_calculation const-decl "real" Verification nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (length def-decl "nat" list_props nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (odd? const-decl "bool" integers nil) (final_case_3 const-decl "bool" Verification nil) (validate_string const-decl "bool" Verification nil) (even? const-decl "bool" integers nil) (final_case_1 const-decl "bool" Verification nil) (final_case_2 const-decl "bool" Verification nil) (y_determination const-decl "bool" Verification nil) (int_times_int_is_int application-judgement "int" integers nil)) shostak))("Verification" Verification finalcase1_ydetcase2_to_verification_TCC1 0 (finalcase1_ydetcase2_to_verification_TCC1-1 nil 3930418932 ("" (subtype-tcc) nil nil) nil nil (finalcase1_ydetcase2_to_verification subtype "Verification.len" "nat")))("Verification" Verification finalcase2_ydetcase2_to_verification_TCC1 0 (finalcase2_ydetcase2_to_verification_TCC1-1 nil 3930418932 ("" (subtype-tcc) nil nil) nil nil (finalcase2_ydetcase2_to_verification subtype "Verification.len" "nat")))("Verification" Verification finalcase3_ydetcase2_to_verification_TCC1 0 (finalcase3_ydetcase2_to_verification_TCC1-1 nil 3930418932 ("" (subtype-tcc) nil nil) nil nil (finalcase3_ydetcase2_to_verification subtype "Verification.len" "nat")))("Verification" Verification verification_to_wrongcases_TCC1 0 (verification_to_wrongcases_TCC1-1 nil 3930420227 ("" (subtype-tcc) nil nil) nil nil (verification_to_wrongcases subtype "Verification.len" "nat")))("Verification" Verification final_cases_TCC1 0 (final_cases_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil nil (final_cases subtype "Verification.y" "posnat")))