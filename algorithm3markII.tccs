%% TCCs associated with theory algorithm3markII
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm3markII_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 39, column 55) for  (n - 1)
	% expected type  nat
	  % untried
	concatenate_recur_TCC1: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND l = FALSE IMPLIES (n - 1) >= 0
	
	% Termination TCC generated (at line 39, column 8) for
	% concatenate_recur(concat(str_base, num), num, (n - 1), FALSE)
	  % untried
	concatenate_recur_TCC2: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND l = FALSE IMPLIES (n - 1) < n
	
	% Subtype TCC generated (at line 42, column 55) for  (n - 1)
	% expected type  nat
	  % untried
	concatenate_recur_TCC3: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND NOT l = FALSE IMPLIES (n - 1) >= 0
	
	% Termination TCC generated (at line 42, column 8) for
	% concatenate_recur(concat(num, str_base), num, (n - 1), TRUE)
	  % untried
	concatenate_recur_TCC4: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND NOT l = FALSE IMPLIES (n - 1) < n
	
	% Subtype TCC generated (at line 54, column 9) for  0
	% expected type  below[length(seq)]
	  % untried
	BVCcalculatorCase0_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): 0 < seq`length
	
	% Subtype TCC generated (at line 56, column 32) for  j - 2 - length(str)
	% expected type  nat
	  % untried
	BVCcalculatorCase0_TCC2: OBLIGATION
	FORALL (j: nat, str: string, seq: finite_sequence[int], str1: string):
	    finseq_appl[int](seq)(0) = 0 AND str1 = (concat("1", str)) IMPLIES
	     j - 2 - str1`length >= 0
	
	% Subtype TCC generated (at line 57, column 21) for  1
	% expected type  below[length(seq)]
	  % untried
	BVCcalculatorCase0_TCC3: OBLIGATION
	FORALL (seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 IMPLIES 1 < seq`length
	
	% Subtype TCC generated (at line 59, column 32) for  j - 2 - length(str)
	% expected type  nat
	  % untried
	BVCcalculatorCase0_TCC4: OBLIGATION
	FORALL (j: nat, str: string, seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 IMPLIES
	     FORALL (str1: string):
	       finseq_appl[int](seq)(0) = finseq_appl[int](seq)(1) AND
	        str1 = (concat("1", str))
	        IMPLIES j - 2 - str1`length >= 0
	
	% Subtype TCC generated (at line 61, column 55) for
	% finseq_appl[int](seq)(0) - finseq_appl[int](seq)(1)
	% expected type  nat
	  % untried
	BVCcalculatorCase0_TCC5: OBLIGATION
	FORALL (seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 AND
	     NOT finseq_appl[int](seq)(0) = finseq_appl[int](seq)(1)
	     IMPLIES finseq_appl[int](seq)(0) - finseq_appl[int](seq)(1) >= 0
	
	% Subtype TCC generated (at line 62, column 35) for  j - 2 - length(str)
	% expected type  nat
	  % untried
	BVCcalculatorCase0_TCC6: OBLIGATION
	FORALL (j: nat, str: string, seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 AND
	     NOT finseq_appl[int](seq)(0) = finseq_appl[int](seq)(1)
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        (concat("1",
	                concatenate_recur(str, "0",
	                                  finseq_appl[int](seq)(0) -
	                                   finseq_appl[int](seq)(1),
	                                  TRUE)))
	        IMPLIES j - 2 - str1`length >= 0
	
	% The subtype TCC (at line 57, column 12) in decl BVCcalculatorCase0 for  0
	% expected type  below[seq`length]
	% The subtype TCC (at line 61, column 59) in decl BVCcalculatorCase0 for  0
	% expected type  below[seq`length]
	% The subtype TCC (at line 61, column 68) in decl BVCcalculatorCase0 for  1
	% expected type  below[seq`length]
	% Subtype TCC generated (at line 75, column 13) for  i
	% expected type  below[length(seq)]
	  % untried
	BVCcalculator_TCC1: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) IMPLIES i < seq`length
	
	% The subtype TCC (at line 57, column 12) in decl BVCcalculatorCase0 for  0
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorCase0_TCC1
	% The subtype TCC (at line 61, column 59) in decl BVCcalculatorCase0 for  0
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorCase0_TCC1
	% The subtype TCC (at line 61, column 68) in decl BVCcalculatorCase0 for  1
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorCase0_TCC3
	
	% Subtype TCC generated (at line 76, column 18) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculator_TCC2: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND (finseq_appl[int](seq)(i) = 0) IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 76, column 4) for
	% BVCcalculator(i - 1, j, concat("1", str), seq)
	  % untried
	BVCcalculator_TCC3: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND (finseq_appl[int](seq)(i) = 0) IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 79, column 20) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculator_TCC4: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND NOT (finseq_appl[int](seq)(i) = 0) IMPLIES
	     FORALL (str1: string):
	       (i = seq`length - 1) AND
	        str1 =
	         concat("1",
	                concatenate_recur(str, "0", finseq_appl[int](seq)(i), TRUE))
	        IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 79, column 6) for
	% BVCcalculator(i - 1, j, str, seq)
	  % untried
	BVCcalculator_TCC5: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND NOT (finseq_appl[int](seq)(i) = 0) IMPLIES
	     FORALL (str1: string):
	       (i = seq`length - 1) AND
	        str1 =
	         concat("1",
	                concatenate_recur(str, "0", finseq_appl[int](seq)(i), TRUE))
	        IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 78, column 54) for
	% finseq_appl[int](seq)(i)
	% expected type  nat
	  % untried
	BVCcalculator_TCC6: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND NOT (finseq_appl[int](seq)(i) = 0) AND (i = seq`length - 1)
	     IMPLIES finseq_appl[int](seq)(i) >= 0
	
	% Subtype TCC generated (at line 80, column 22) for  i + 1
	% expected type  below[length(seq)]
	  % untried
	BVCcalculator_TCC7: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND NOT (i = seq`length - 1)
	     IMPLIES i + 1 < seq`length
	
	% Subtype TCC generated (at line 82, column 20) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculator_TCC8: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND NOT (i = seq`length - 1)
	     IMPLIES
	     FORALL (str1: string):
	       (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1)) AND
	        str1 = concat("1", str)
	        IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 82, column 6) for
	% BVCcalculator(i - 1, j, str, seq)
	  % untried
	BVCcalculator_TCC9: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND NOT (i = seq`length - 1)
	     IMPLIES
	     FORALL (str1: string):
	       (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1)) AND
	        str1 = concat("1", str)
	        IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 85, column 20) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculator_TCC10: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND
	      NOT (i = seq`length - 1) AND
	       NOT (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1))
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        concat("1",
	               concatenate_recur(str, "0",
	                                 finseq_appl[int](seq)(i) -
	                                  finseq_appl[int](seq)(i + 1),
	                                 TRUE))
	        IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 85, column 6) for
	% BVCcalculator(i - 1, j, str, seq)
	  % untried
	BVCcalculator_TCC11: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND
	      NOT (i = seq`length - 1) AND
	       NOT (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1))
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        concat("1",
	               concatenate_recur(str, "0",
	                                 finseq_appl[int](seq)(i) -
	                                  finseq_appl[int](seq)(i + 1),
	                                 TRUE))
	        IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 84, column 54) for
	% finseq_appl[int](seq)(i) - finseq_appl[int](seq)(i + 1)
	% expected type  nat
	  % untried
	BVCcalculator_TCC12: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND
	      NOT (i = seq`length - 1) AND
	       NOT (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1))
	     IMPLIES finseq_appl[int](seq)(i) - finseq_appl[int](seq)(i + 1) >= 0
	
	% The subtype TCC (at line 78, column 58) in decl BVCcalculator for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 80, column 13) in decl BVCcalculator for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 84, column 58) in decl BVCcalculator for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 84, column 67) in decl BVCcalculator for  i + 1
	% expected type  below[seq`length]
	% Subtype TCC generated (at line 103, column 10) for  i
	% expected type  naturalnumber
	  % untried
	sumCalculator_TCC1: OBLIGATION
	FORALL (i: int): i >= 0
	
	% The subtype TCC (at line 78, column 58) in decl BVCcalculator for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculator_TCC1
	% The subtype TCC (at line 80, column 13) in decl BVCcalculator for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculator_TCC1
	% The subtype TCC (at line 84, column 58) in decl BVCcalculator for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculator_TCC1
	% The subtype TCC (at line 84, column 67) in decl BVCcalculator for  i + 1
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculator_TCC7
	
	% Subtype TCC generated (at line 98, column 19) for  i
	% expected type  below[length(seq)]
	  % untried
	sumCalculator_TCC2: OBLIGATION
	FORALL (i, origN: int, seq: finite_sequence[int]):
	    i = (origN - 1) IMPLIES i >= 0 AND i < seq`length
	
	% Subtype TCC generated (at line 101, column 36) for  sum
	% expected type  int
	  % untried
	sumCalculator_TCC3: OBLIGATION
	FORALL (i, origN, sum: int, seq: finite_sequence[int]):
	    NOT i = (origN - 1) IMPLIES
	     FORALL (sum1: rat):
	       sum1 = sum + ((2 ^ (finseq_appl[int](seq)(i))) * (3 ^ (i + 1))) IMPLIES
	        integer_pred(sum1)
	
	% Termination TCC generated (at line 101, column 6) for
	% sumCalculator((i + 1), origN, sum, seq)
	  % untried
	sumCalculator_TCC4: OBLIGATION
	FORALL (i, origN, sum: int, seq: finite_sequence[int]):
	    NOT i = (origN - 1) IMPLIES
	     FORALL (sum1: rat):
	       sum1 = sum + ((2 ^ (finseq_appl[int](seq)(i))) * (3 ^ (i + 1))) IMPLIES
	        (i + 1) < i
	
	% Subtype TCC generated (at line 100, column 29) for  i
	% expected type  below[length(seq)]
	  % untried
	sumCalculator_TCC5: OBLIGATION
	FORALL (i, origN: int, seq: finite_sequence[int]):
	    NOT i = (origN - 1) IMPLIES i >= 0 AND i < seq`length
	
	% Subtype TCC generated (at line 126, column 18) for  x
	% expected type  below[length(seq)]
	  % untried
	printList_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int], x: subrange(0, seq`length - 1)):
	    x >= 0 AND x < seq`length
	
	% Subtype TCC generated (at line 130, column 22) for
	% collatzNumCalculator(origN, Y_k, j, qj, seq)
	% expected type  rational
	  % untried
	case_accept_TCC1: OBLIGATION
	FORALL (origN, Y_k: int, j, qj: nat, seq: finite_sequence[int]):
	    rational_pred(collatzNumCalculator(origN, Y_k, j, qj, seq))
	
	% Subtype TCC generated (at line 134, column 29) for  (length(seq) - 1)
	% expected type  nat
	  % untried
	case_accept_TCC2: OBLIGATION
	FORALL (origN, Y_k: int, j, qj: nat, seq: finite_sequence[int]):
	    integer_pred(collatzNumCalculator(origN, Y_k, j, qj, seq)) IMPLIES
	     FORALL (collatzNum: real):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) IMPLIES
	        (seq`length - 1) >= 0
	
	% Subtype TCC generated (at line 135, column 24) for  collatzNum
	% expected type  int
	  % untried
	case_accept_TCC3: OBLIGATION
	FORALL (origN, Y_k: int, j, qj: nat, seq: finite_sequence[int]):
	    integer_pred(collatzNumCalculator(origN, Y_k, j, qj, seq)) IMPLIES
	     FORALL (collatzNum: real, BVC: string):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) AND
	        BVC = BVCcalculator((seq`length - 1), j, "", seq)
	        IMPLIES rational_pred(collatzNum) AND integer_pred(collatzNum)
	
	% Subtype TCC generated (at line 138, column 27) for  (length(seq) - 1)
	% expected type  nat
	  % untried
	case_accept_TCC4: OBLIGATION
	FORALL (origN, Y_k: int, j, qj: nat, seq: finite_sequence[int]):
	    integer_pred(collatzNumCalculator(origN, Y_k, j, qj, seq)) AND
	     NOT LET collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) IN
	           LET BVC = BVCcalculator((seq`length - 1), j, "", seq) IN
	             verification_portal(collatzNum, BVC) = TRUE
	      AND
	      printstr(concat(real2str(collatzNumCalculator(origN, Y_k, j, qj, seq)),
	                      newline))
	     IMPLIES (seq`length - 1) >= 0
	
	% Subtype TCC generated (at line 144, column 12) for  x
	% expected type  below[length(seq)]
	  % untried
	caseNnotgreaterthan1_innerfor_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int], origN: nat, x: subrange(0, (origN - 1))):
	    x >= 0 AND x < seq`length
	
	% Subtype TCC generated (at line 144, column 21) for  x + 1
	% expected type  below[length(seq)]
	  % untried
	caseNnotgreaterthan1_innerfor_TCC2: OBLIGATION
	FORALL (seq: finite_sequence[int], origN: nat, x: subrange(0, (origN - 1))):
	    x + 1 >= 0 AND x + 1 < seq`length
	
	% Subtype TCC generated (at line 151, column 75) for  origN - 1
	% expected type  nat
	  % untried
	else_loop_TCC1: OBLIGATION
	FORALL (l: nat, origN: int, seq: finite_sequence[int], seq1: finseq[int]):
	    l = 0 AND seq1 = add(l, seq) IMPLIES origN - 1 >= 0
	
	% Subtype TCC generated (at line 153, column 28) for  length(seq) - 1
	% expected type  nat
	  % untried
	else_loop_TCC2: OBLIGATION
	FORALL (l: nat, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    (l = 0 AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES
	     FORALL (collatzNum: real):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) IMPLIES
	        seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 154, column 24) for  collatzNum
	% expected type  int
	  % untried
	else_loop_TCC3: OBLIGATION
	FORALL (l: nat, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    (l = 0 AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES
	     FORALL (collatzNum: real, BVC: string):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) AND
	        BVC = BVCcalculator(seq`length - 1, origN, "", seq)
	        IMPLIES rational_pred(collatzNum) AND integer_pred(collatzNum)
	
	% Subtype TCC generated (at line 152, column 54) for  j
	% expected type  nat
	  % untried
	else_loop_TCC4: OBLIGATION
	FORALL (l: nat, origN, j: int, seq: finite_sequence[int]):
	    (l = 0 AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES j >= 0
	
	% Subtype TCC generated (at line 156, column 64) for  origN - 1
	% expected type  nat
	  % untried
	else_loop_TCC5: OBLIGATION
	FORALL (l: nat, origN: int, seq: finite_sequence[int]):
	    NOT (l = 0 AND
	          LET seq = add(l, seq) IN
	            caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES
	     FORALL (seq1: finseq[int]): seq1 = add(l, seq) IMPLIES origN - 1 >= 0
	
	% Subtype TCC generated (at line 158, column 30) for  length(seq) - 1
	% expected type  nat
	  % untried
	else_loop_TCC6: OBLIGATION
	FORALL (l: nat, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    (NOT (l = 0 AND
	           LET seq = add(l, seq) IN
	             caseNnotgreaterthan1_innerfor(seq, origN - 1))
	      AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES
	     FORALL (collatzNum: real):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) IMPLIES
	        seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 159, column 26) for  collatzNum
	% expected type  int
	  % untried
	else_loop_TCC7: OBLIGATION
	FORALL (l: nat, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    (NOT (l = 0 AND
	           LET seq = add(l, seq) IN
	             caseNnotgreaterthan1_innerfor(seq, origN - 1))
	      AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES
	     FORALL (collatzNum: real, BVC: string):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) AND
	        BVC = BVCcalculator(seq`length - 1, origN, "", seq)
	        IMPLIES rational_pred(collatzNum) AND integer_pred(collatzNum)
	
	% Subtype TCC generated (at line 159, column 57) for  l - 1
	% expected type  nat
	  % untried
	else_loop_TCC8: OBLIGATION
	FORALL (l: nat, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    (NOT (l = 0 AND
	           LET seq = add(l, seq) IN
	             caseNnotgreaterthan1_innerfor(seq, origN - 1))
	      AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES
	     FORALL (collatzNum: real, BVC: string):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) AND
	        BVC = BVCcalculator(seq`length - 1, origN, "", seq) AND
	         verification_portal(collatzNum, BVC)
	        IMPLIES l - 1 >= 0
	
	% Termination TCC generated (at line 159, column 47) for
	% else_loop(l - 1, origN, j, qj, Y_k, seq)
	  % untried
	else_loop_TCC9: OBLIGATION
	FORALL (l: nat, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    NOT (l = 0 AND caseNnotgreaterthan1_innerfor(add(l, seq), origN - 1)) AND
	     caseNnotgreaterthan1_innerfor(add(l, seq), origN - 1)
	     IMPLIES
	     FORALL (collatzNum: real, BVC: string):
	       collatzNum = collatzNumCalculator(origN, Y_k, j, qj, seq) AND
	        BVC = BVCcalculator(seq`length - 1, origN, "", seq) AND
	         verification_portal(collatzNum, BVC)
	        IMPLIES l - 1 < l
	
	% Subtype TCC generated (at line 157, column 56) for  j
	% expected type  nat
	  % untried
	else_loop_TCC10: OBLIGATION
	FORALL (l: nat, origN, j: int, seq: finite_sequence[int]):
	    (NOT (l = 0 AND
	           LET seq = add(l, seq) IN
	             caseNnotgreaterthan1_innerfor(seq, origN - 1))
	      AND
	      LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     IMPLIES j >= 0
	
	% Subtype TCC generated (at line 161, column 16) for  l - 1
	% expected type  nat
	  % untried
	else_loop_TCC11: OBLIGATION
	FORALL (l: nat, origN: int, seq: finite_sequence[int]):
	    NOT (l = 0 AND
	          LET seq = add(l, seq) IN
	            caseNnotgreaterthan1_innerfor(seq, origN - 1))
	     AND
	     NOT LET seq = add(l, seq) IN caseNnotgreaterthan1_innerfor(seq, origN - 1)
	     IMPLIES l - 1 >= 0
	
	% Termination TCC generated (at line 161, column 6) for
	% else_loop(l - 1, origN, j, qj, Y_k, seq)
	  % untried
	else_loop_TCC12: OBLIGATION
	FORALL (l: nat, origN: int, seq: finite_sequence[int]):
	    NOT (l = 0 AND caseNnotgreaterthan1_innerfor(add(l, seq), origN - 1)) AND
	     NOT caseNnotgreaterthan1_innerfor(add(l, seq), origN - 1)
	     IMPLIES l - 1 < l
	
	% The subtype TCC (at line 153, column 45) in decl else_loop for  origN
	% expected type  nat
	% The subtype TCC (at line 152, column 57) in decl else_loop for  qj
	% expected type  nat
	% The subtype TCC (at line 158, column 47) in decl else_loop for  origN
	% expected type  nat
	% The subtype TCC (at line 157, column 59) in decl else_loop for  qj
	% expected type  nat
	% The subtype TCC (at line 170, column 14) in decl print_finite_seq for  x
	% expected type  below[seq`length]
	% Subtype TCC generated (at line 174, column 14) for  x
	% expected type  nat
	  % untried
	print_seq_TCC1: OBLIGATION
	FORALL (length: nat, x: subrange(0, length - 1)): x >= 0
	
	% The subtype TCC (at line 153, column 45) in decl else_loop for  origN
	    % expected type  nat
	  % is subsumed by sumCalculator_TCC1
	% The subtype TCC (at line 152, column 57) in decl else_loop for  qj
	    % expected type  nat
	  % is subsumed by else_loop_TCC4
	% The subtype TCC (at line 158, column 47) in decl else_loop for  origN
	    % expected type  nat
	  % is subsumed by sumCalculator_TCC1
	% The subtype TCC (at line 157, column 59) in decl else_loop for  qj
	    % expected type  nat
	  % is subsumed by else_loop_TCC10
	% The subtype TCC (at line 170, column 14) in decl print_finite_seq for  x
	    % expected type  below[seq`length]
	  % is subsumed by printList_TCC1
	
	% Subtype TCC generated (at line 180, column 92) for  current_index - 1
	% expected type  nat
	  % untried
	delete_finite_seq_helper_TCC1: OBLIGATION
	FORALL (len, current_index: nat, seq: sequence[int],
	          base_seq: finite_sequence[int]):
	    NOT current_index = 0 IMPLIES
	     FORALL (base_seq1: finseq[int]):
	       base_seq1 = add(seq(len - current_index), base_seq) IMPLIES
	        current_index - 1 >= 0
	
	% Termination TCC generated (at line 180, column 62) for
	% delete_finite_seq_helper(len, current_index - 1, seq, base_seq)
	  % untried
	delete_finite_seq_helper_TCC2: OBLIGATION
	FORALL (len, current_index: nat, seq: sequence[int],
	          base_seq: finite_sequence[int]):
	    NOT current_index = 0 IMPLIES
	     FORALL (base_seq1: finseq[int]):
	       base_seq1 = add(seq(len - current_index), base_seq) IMPLIES
	        current_index - 1 < current_index
	
	% Subtype TCC generated (at line 180, column 27) for  len - current_index
	% expected type  nat
	  % untried
	delete_finite_seq_helper_TCC3: OBLIGATION
	FORALL (len, current_index: nat):
	    NOT current_index = 0 IMPLIES len - current_index >= 0
	
	% Subtype TCC generated (at line 185, column 28) for  (length(seq) - 1)
	% expected type  nat
	  % untried
	delete_finite_seq_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): (seq`length - 1) >= 0
	
	% Subtype TCC generated (at line 185, column 79) for  finseq_appl[int](seq)
	% expected type  sequence[int]
	  % untried
	delete_finite_seq_TCC2: OBLIGATION
	FORALL (seq: finite_sequence[int]): FORALL (x: nat): x < seq`length
	
	% The subtype TCC (at line 185, column 47) in decl delete_finite_seq for  (seq`length - 1)
	% expected type  nat
	% The subtype TCC (at line 191, column 85) in decl delete_finite_seq_helper_bool for  len - current_index
	% expected type  nat
	% The subtype TCC (at line 191, column 231) in decl delete_finite_seq_helper_bool for  current_index - 1
	% expected type  nat
	% The termination TCC (at line 191, column 196) in decl delete_finite_seq_helper_bool for
	%  delete_finite_seq_helper_bool(len, current_index - 1, seq, base_seq)
	% The subtype TCC (at line 191, column 161) in decl delete_finite_seq_helper_bool for  len - current_index
	% expected type  nat
	% The subtype TCC (at line 196, column 33) in decl delete_finite_seq_bool for  (seq`length - 1)
	% expected type  nat
	% The subtype TCC (at line 196, column 52) in decl delete_finite_seq_bool for  (seq`length - 1)
	% expected type  nat
	% The subtype TCC (at line 196, column 84) in decl delete_finite_seq_bool for  finseq_appl[int](seq)
	% expected type  sequence[int]
	% Subtype TCC generated (at line 204, column 17) for  n - 1
	% expected type  nat
	  % untried
	recursiveFor_TCC1: OBLIGATION
	FORALL (n: nat, l: int, seq: finite_sequence[int]):
	    NOT n = 1 AND printstr("Before append: ") AND print_finite_seq(add(l, seq))
	     IMPLIES n - 1 >= 0
	
	% The subtype TCC (at line 185, column 47) in decl delete_finite_seq for  (seq`length - 1)
	    % expected type  nat
	  % is subsumed by delete_finite_seq_TCC1
	% The subtype TCC (at line 191, column 85) in decl delete_finite_seq_helper_bool for  len - current_index
	    % expected type  nat
	  % is subsumed by delete_finite_seq_helper_TCC3
	% The subtype TCC (at line 191, column 231) in decl delete_finite_seq_helper_bool for  current_index - 1
	    % expected type  nat
	  % is subsumed by delete_finite_seq_helper_TCC1
	% The termination TCC (at line 191, column 196) in decl delete_finite_seq_helper_bool for
	    %  delete_finite_seq_helper_bool(len, current_index - 1, seq, base_seq)
	  % is subsumed by delete_finite_seq_helper_TCC2
	% The subtype TCC (at line 191, column 161) in decl delete_finite_seq_helper_bool for  len - current_index
	    % expected type  nat
	  % is subsumed by delete_finite_seq_helper_TCC3
	% The subtype TCC (at line 196, column 33) in decl delete_finite_seq_bool for  (seq`length - 1)
	    % expected type  nat
	  % is subsumed by delete_finite_seq_TCC1
	% The subtype TCC (at line 196, column 52) in decl delete_finite_seq_bool for  (seq`length - 1)
	    % expected type  nat
	  % is subsumed by delete_finite_seq_TCC1
	% The subtype TCC (at line 196, column 84) in decl delete_finite_seq_bool for  finseq_appl[int](seq)
	    % expected type  sequence[int]
	  % is subsumed by delete_finite_seq_TCC2
	
	% Termination TCC generated (at line 204, column 4) for
	% recursiveFor(n - 1, l, origN, j, qj, Y_k, add(l, seq))
	  % untried
	recursiveFor_TCC2: OBLIGATION
	FORALL (n: nat, l: int, seq: finite_sequence[int]):
	    NOT n = 1 AND printstr("Before append: ") AND print_finite_seq(add(l, seq))
	     IMPLIES n - 1 < n
	
	% Subtype TCC generated (at line 205, column 65) for  origN - n
	% expected type  nat
	  % untried
	recursiveFor_TCC3: OBLIGATION
	FORALL (n: nat,
	          v:
	            [{z: [nat, int, int, int, int, int, finite_sequence[int]] |
	                z`1 < n} ->
	               bool],
	          l, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    NOT n = 1 AND
	     printstr("Before append: ") AND
	      print_finite_seq(add(l, seq)) AND
	       v(n - 1, l, origN, j, qj, Y_k, add(l, seq))
	     IMPLIES origN - n >= 0
	
	% Termination TCC generated (at line 205, column 4) for
	% recursiveFor(n, l - 1, origN, j, qj, Y_k,
	%              (delete_finite_seq(origN - n, seq)))
	  % untried
	recursiveFor_TCC4: OBLIGATION
	FORALL (n: nat,
	          v:
	            [{z: [nat, int, int, int, int, int, finite_sequence[int]] |
	                z`1 < n} ->
	               bool],
	          l, origN, j, qj, Y_k: int, seq: finite_sequence[int]):
	    NOT n = 1 AND
	     printstr("Before append: ") AND
	      print_finite_seq(add(l, seq)) AND
	       v(n - 1, l, origN, j, qj, Y_k, add(l, seq))
	     IMPLIES n < n

END algorithm3markII_TCCS