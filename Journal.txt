This file covers what I have done in every day.

6/7/2024: * Reviewed Collatz paper in morning, brainstormed how I would go about proving some of the more complex theorems. 
            Current thoughts are:
            - Specify Pcltz and R(x) before moving onto specifying stairs.
            - Specifiy stairs. Perhaps this will be a type that is based on how many repetitions of Pcltz it is from (1, 2, 4).
            - After this, the way to lemma 3 will be paved.

          * Created an overarching file, Collatz.pvs, that will contain everything (algorithms, lemmas, theories, etc). Will be broken up if needed.
          * Created a Github
          * Continuing work on proving lemmas 7 and 8.
          * Current small problem: How to get proofs onto Github

6/8/2024: * Reading through Collatz paper, thinking about which lemmas to first attack after proving lemmas 7 and 8. Current thoughts:
            - Define the Collatz function, and prove lemma 10. This lemma is the "no two subtrees intersect one", but although this sounds complicated,
              this can be summed up as "for all computations of fcltz(c), it only has one result"; in other words, fcltz(c) is one to one. 
              This will required fcltz(c) to be developed first, which shouldn't be that hard-but how do we mechanically verify it is one to one? 
              Perhaps there is something in the prelude for this. Line 244 has functions, with an injective boolean:

              injective?(f): bool = (FORALL x1, x2: (f(x1) = f(x2) => (x1 = x2)))

              Based off of this, we could prove lemma 10 via something similar:

              lemma10 LEMMA: FORALL x1, x2: (fcltz(x1) = fcltz(x2) => (x1 = x2))

              However, the lemma specified in the paper proves this via contradiction. So should we try contradiction rather than a more direct proof
              like I have outlined?

6/11/2024: * Attempted working on algorithm 1, got a bit overwhelmed so trying R(x) and Pcltz(x).
           * Created R(x), Fcltz(x), and Pcltz_full, which should be a recursive Collatz function that always boils down to 0.

6/12/2024: * Created lemma10.
           * (Hopefully) proved lemma10; awaiting approving from Ali
           * Realized R(x) was wrong after working on lemma 3.
           - Need to work with an array...

6/13/2024: * Somewhat of a "stumbling around" day, trying to figure out how to complete R(x), need a list, sequence, array, some sort of data structure.