%% TCCs associated with theory algorithm2
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm2_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 36, column 55) for  (n - 1)
	% expected type  nat
	  % untried
	concatenate_recur_TCC1: OBLIGATION
	FORALL (n: nat, l: bool): NOT n = 0 AND l = FALSE IMPLIES (n - 1) >= 0
	
	% Termination TCC generated (at line 36, column 8) for
	% concatenate_recur(concat(str_base, num), num, (n - 1), FALSE)
	  % untried
	concatenate_recur_TCC2: OBLIGATION
	FORALL (n: nat, l: bool): NOT n = 0 AND l = FALSE IMPLIES (n - 1) < n
	
	% Subtype TCC generated (at line 39, column 55) for  (n - 1)
	% expected type  nat
	  % untried
	concatenate_recur_TCC3: OBLIGATION
	FORALL (n: nat, l: bool): NOT n = 0 AND NOT l = FALSE IMPLIES (n - 1) >= 0
	
	% Termination TCC generated (at line 39, column 8) for
	% concatenate_recur(concat(num, str_base), num, (n - 1), TRUE)
	  % untried
	concatenate_recur_TCC4: OBLIGATION
	FORALL (n: nat, l: bool): NOT n = 0 AND NOT l = FALSE IMPLIES (n - 1) < n
	
	% The subtype TCC (at line 61, column 55) in decl concatenate_recur_mod for  (n - 1)
	% expected type  nat
	% The subtype TCC (at line 64, column 55) in decl concatenate_recur_mod for  (n - 1)
	% expected type  nat
	% Subtype TCC generated (at line 83, column 52) for  (j - 2)
	% expected type  nat
	  % untried
	case1_TCC1: OBLIGATION
	FORALL (j: int):
	    printstr(concat("Case 1: qj = 1:", newline)) IMPLIES (j - 2) >= 0
	
	% The subtype TCC (at line 61, column 55) in decl concatenate_recur_mod for  (n - 1)
	    % expected type  nat
	  % is subsumed by concatenate_recur_TCC1
	% The subtype TCC (at line 64, column 55) in decl concatenate_recur_mod for  (n - 1)
	    % expected type  nat
	  % is subsumed by concatenate_recur_TCC3
	
	% The subtype TCC (at line 84, column 152) in decl case1 for  (j - 2)
	% expected type  nat
	% Subtype TCC generated (at line 104, column 12) for  top
	% expected type  naturalnumber
	  % untried
	case2summation_TCC1: OBLIGATION
	FORALL (top: int): top >= 0
	
	% The subtype TCC (at line 84, column 152) in decl case1 for  (j - 2)
	    % expected type  nat
	  % is subsumed by case1_TCC1
	
	% Termination TCC generated (at line 102, column 8) for
	% case2summation((top - 1), (sum + (3 ^ top)))
	  % untried
	case2summation_TCC2: OBLIGATION
	FORALL (top: int): NOT (top = 1) IMPLIES (top - 1) < top
	
	% Termination TCC generated (at line 140, column 8) for
	% case3subloop(j, i, (t - 1), concat(str, "1"))
	  % untried
	case3subloop_TCC1: OBLIGATION
	FORALL (i, t: int): NOT t = -1 AND t = i IMPLIES (t - 1) < t
	
	% Termination TCC generated (at line 142, column 8) for
	% case3subloop(j, i, (t - 1), concat(str, "0"))
	  % untried
	case3subloop_TCC2: OBLIGATION
	FORALL (i, t: int): NOT t = -1 AND NOT t = i IMPLIES (t - 1) < t
	
	% The subtype TCC (at line 144, column 12) in decl case3subloop for  t
	% expected type  naturalnumber
	% Subtype TCC generated (at line 187, column 47) for  ((j - 3) - m)
	% expected type  nat
	  % untried
	case4_TCC1: OBLIGATION
	FORALL (j, m: int):
	    NOT (m = 0) IMPLIES
	     FORALL (str1: finseq[char]): str1 = "" IMPLIES ((j - 3) - m) >= 0
	
	% The subtype TCC (at line 144, column 12) in decl case3subloop for  t
	    % expected type  naturalnumber
	  % is subsumed by case2summation_TCC1
	
	% Subtype TCC generated (at line 205, column 29) for
	% ((2 ^ (j - 1)) * (yk / 3))
	% expected type  int
	  % untried
	mainfor_TCC1: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	    (qj = 1) IMPLIES integer_pred(((2 ^ (j - 1)) * (yk / 3)))
	
	% Subtype TCC generated (at line 207, column 28) for
	% ((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))
	% expected type  int
	  % untried
	mainfor_TCC2: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	    NOT (qj = 1) AND (qj = j - 1) IMPLIES
	     rational_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))) AND
	      integer_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1)))
	
	% Subtype TCC generated (at line 231, column 72) for  (2 ^ (2 * k) - 1)
	% expected type  int
	  % untried
	alg2_TCC1: OBLIGATION
	FORALL (k, j: int):
	    NOT (k < 2) AND
	     NOT (j < 1) AND
	      printstr("Y_k/3 = ") AND
	       printstr(concat(real2str(2 ^ (2 * k) - 1), newline))
	     IMPLIES integer_pred((2 ^ (2 * k) - 1))

END algorithm2_TCCS