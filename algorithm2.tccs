%% TCCs associated with theory algorithm2
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm2_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 41, column 12) for  n
	% expected type  naturalnumber
	  % untried
	concatenate_recur_TCC1: OBLIGATION
	FORALL (n: int): n >= 0
	
	% Termination TCC generated (at line 36, column 8) for
	% concatenate_recur(concat(str_base, num), num, (n - 1), FALSE)
	  % untried
	concatenate_recur_TCC2: OBLIGATION
	FORALL (n: int, l: bool): NOT n <= 0 AND l = FALSE IMPLIES (n - 1) < n
	
	% Termination TCC generated (at line 39, column 8) for
	% concatenate_recur(concat(num, str_base), num, (n - 1), TRUE)
	  % untried
	concatenate_recur_TCC3: OBLIGATION
	FORALL (n: int, l: bool): NOT n <= 0 AND NOT l = FALSE IMPLIES (n - 1) < n
	
	% The subtype TCC (at line 66, column 12) in decl concatenate_recur_mod for  n
	% expected type  naturalnumber
	% Termination TCC generated (at line 102, column 8) for
	% case2summation((top - 1), (sum + (3 ^ top)))
	  % untried
	case2summation_TCC1: OBLIGATION
	FORALL (top: int): NOT (top = 1) IMPLIES (top - 1) < top
	
	% The subtype TCC (at line 66, column 12) in decl concatenate_recur_mod for  n
	    % expected type  naturalnumber
	  % is subsumed by concatenate_recur_TCC1
	
	% The subtype TCC (at line 104, column 12) in decl case2summation for  top
	% expected type  naturalnumber
	% Termination TCC generated (at line 141, column 8) for
	% case3subloop(j, i, (t - 1), concat(str, "1"))
	  % untried
	case3subloop_TCC1: OBLIGATION
	FORALL (i, t: int): NOT t = -1 AND t = i IMPLIES (t - 1) < t
	
	% The subtype TCC (at line 104, column 12) in decl case2summation for  top
	    % expected type  naturalnumber
	  % is subsumed by concatenate_recur_TCC1
	
	% Termination TCC generated (at line 143, column 8) for
	% case3subloop(j, i, (t - 1), concat(str, "0"))
	  % proved
	case3subloop_TCC2: OBLIGATION
	FORALL (i, t: int): NOT t = -1 AND NOT t = i IMPLIES (t - 1) < t
	
	% The subtype TCC (at line 145, column 12) in decl case3subloop for  t
	% expected type  naturalnumber
	% Subtype TCC generated (at line 187, column 32) for  sum + (2 * 3 ^ i)
	% expected type  int
	  % untried
	c4xvalsum1_TCC1: OBLIGATION
	FORALL (i, sum: int): NOT i = 0 IMPLIES integer_pred(sum + (2 * 3 ^ i))
	
	% The subtype TCC (at line 145, column 12) in decl case3subloop for  t
	    % expected type  naturalnumber
	  % is subsumed by concatenate_recur_TCC1
	
	% Termination TCC generated (at line 187, column 8) for
	% c4xvalsum1(yk, (i - 1), sum + (2 * 3 ^ i))
	  % untried
	c4xvalsum1_TCC2: OBLIGATION
	FORALL (i: int): NOT i = 0 IMPLIES (i - 1) < i
	
	% The subtype TCC (at line 189, column 12) in decl c4xvalsum1 for  i
	% expected type  naturalnumber
	% Subtype TCC generated (at line 195, column 35) for  sum + (3 ^ i)
	% expected type  int
	  % untried
	c4xvalsum2_TCC1: OBLIGATION
	FORALL (m, i, sum: int): NOT i = m IMPLIES integer_pred(sum + (3 ^ i))
	
	% The subtype TCC (at line 189, column 12) in decl c4xvalsum1 for  i
	    % expected type  naturalnumber
	  % is subsumed by concatenate_recur_TCC1
	
	% Termination TCC generated (at line 195, column 8) for
	% c4xvalsum2(m, yk, (i - 1), sum + (3 ^ i))
	  % untried
	c4xvalsum2_TCC2: OBLIGATION
	FORALL (m, i: int): NOT i = m IMPLIES (i - 1) < i
	
	% The subtype TCC (at line 197, column 12) in decl c4xvalsum2 for  i
	% expected type  naturalnumber
	% Subtype TCC generated (at line 200, column 4) for
	% ((4 * yk) - (c4xvalsum1(yk, m, 0) + c4xvalsum2(m, yk, (j - 3), 0))) /
	%  3 ^ (j - 2)
	% expected type  int
	  % untried
	case4xval_TCC1: OBLIGATION
	FORALL (m, j, yk: int):
	    integer_pred(((4 * yk) -
	                   (c4xvalsum1(yk, m, 0) + c4xvalsum2(m, yk, (j - 3), 0)))
	                  / 3 ^ (j - 2))
	
	% The subtype TCC (at line 197, column 12) in decl c4xvalsum2 for  i
	    % expected type  naturalnumber
	  % is subsumed by concatenate_recur_TCC1
	
	% Subtype TCC generated (at line 286, column 29) for
	% ((2 ^ (j - 1)) * (yk / 3))
	% expected type  int
	  % untried
	mainfor_TCC1: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	    (qj = 1) IMPLIES integer_pred(((2 ^ (j - 1)) * (yk / 3)))
	
	% Subtype TCC generated (at line 288, column 28) for
	% ((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))
	% expected type  int
	  % untried
	mainfor_TCC2: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	    NOT (qj = 1) AND (qj = j - 1) IMPLIES
	     rational_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))) AND
	      integer_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1)))
	
	% Subtype TCC generated (at line 314, column 23) for  (2 ^ (2 * k) - 1)
	% expected type  int
	  % untried
	alg2_TCC1: OBLIGATION
	FORALL (k, j: int):
	    NOT (k < 2) AND NOT (j < 1) IMPLIES integer_pred((2 ^ (2 * k) - 1))

END algorithm2_TCCS