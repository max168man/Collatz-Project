(Verification
 (is_power_of_two_TCC1 0
  (is_power_of_two_TCC1-1 nil 3929538749 ("" (grind) nil nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil (is_power_of_two subtype "Verification.x" "naturalnumber")))
 (is_power_of_two_TCC2 0
  (is_power_of_two_TCC2-1 nil 3929538749 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil
   (is_power_of_two termination
    "Verification.is_power_of_two(number_fields./(Verification.x, 2))"
    "nil")))
 (y_calculation_TCC1 0
  (y_calculation_TCC1-1 nil 3929538824 ("" (grind) nil nil) nil nil
   (y_calculation subtype "((number_fields.-)(Verification.len, 1))"
    "nat")))
 (validate_string_TCC1 0
  (validate_string_TCC1-1 nil 3930490923 ("" (grind) nil nil) nil nil
   (validate_string subtype "Verification.k" "nat")))
 (verification_TCC1 0
  (verification_TCC4-1 nil 3930490971 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (validate_string const-decl "bool" Verification nil))
   nil (verification subtype "Verification.len" "posint")))
 (verification_TCC2 0
  (verification_TCC2-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (verification subtype
    "Verification.y_calculation(Verification.x, Verification.s, Verification.len)"
    "int")))
 (verification_TCC3 0
  (verification_TCC3-1 nil 3929538824 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (validate_string const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_2 const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_cases const-decl "bool" Verification nil)
    (y_determination const-decl "bool" Verification nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (verification subtype "(number_fields.-)(Verification.len, 2)"
    "nat")))
 (verification_TCC4 0
  (verification_TCC4-1 nil 3929538824 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (validate_string const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_2 const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_cases const-decl "bool" Verification nil)
    (y_determination const-decl "bool" Verification nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil
   (verification termination
    "Verification.verification(Verification.y_calculation(Verification.x, Verification.s, Verification.len), stdstr.substr(Verification.s, 0, (number_fields.-)(Verification.len, 2)), (number_fields.-)(Verification.len, 1))"
    "nil")))
 (lemma_power_two_true 0
  (lemma_power_two_true-1 nil 3930492496
   ("" (induct n)
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "is_power_of_two" +)
        (("2" (case "2 ^ (1 + j) = 1")
          (("1" (grind) nil nil)
           ("2" (case (2 ^ (1 + j) < 1))
            (("1" (grind) nil nil)
             ("2" (case "integer_pred(2 ^ (1 + j) / 2)")
              (("1" (grind) nil nil)
               ("2" (case "is_power_of_two((2 ^ (1 + j)) / 2)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_power_of_two def-decl "bool" Verification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (lemma_power_two_false 0
  (lemma_power_two_false-1 nil 3930487569
   ("" (skeep)
    (("" (skeep)
      (("" (lemma lemma_power_two_true)
        (("" (inst?)
          (("" (expand "is_power_of_two") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (is_power_of_two def-decl "bool" Verification nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (lemma_power_two_true formula-decl nil Verification nil))
   shostak))
 (finalcase1_to_finalcases 0
  (finalcase1_to_finalcases-1 nil 3930414864
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (finalcase2_to_finalcases 0
  (finalcase2_to_finalcases-1 nil 3930415072
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (finalcase3_to_finalcases 0
  (finalcase3_to_finalcases-1 nil 3930415085
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_3 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (finalcases_to_verification 0
  (finalcases_to_verification-1 nil 3930416241
   ("" (skosimp*)
    (("" (expand verification)
      (("" (expand y_determination) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((verification def-decl "bool" Verification nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (validate_string const-decl "bool" Verification nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (y_calculation const-decl "real" Verification nil)
    (y_determination const-decl "bool" Verification nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (finalcases1_to_verification 0
  (finalcases1_to_verification-1 nil 3930419255
   ("" (skeep)
    (("" (expand verification)
      (("" (expand y_determination)
        (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((verification def-decl "bool" Verification nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (final_cases const-decl "bool" Verification nil)
    (y_calculation const-decl "real" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (validate_string const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (y_determination const-decl "bool" Verification nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (finalcases2_to_verification 0
  (finalcases2_to_verification-1 nil 3930491777
   ("" (skeep)
    (("" (expand verification)
      (("" (expand y_determination)
        (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((verification def-decl "bool" Verification nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (final_cases const-decl "bool" Verification nil)
    (y_calculation const-decl "real" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (validate_string const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (y_determination const-decl "bool" Verification nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (finalcases3_to_verification 0
  (finalcases3_to_verification-1 nil 3930491818
   ("" (grind)
    (("" (expand verification)
      (("" (expand y_determination)
        (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((verification def-decl "bool" Verification nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (final_cases const-decl "bool" Verification nil)
    (validate_string const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (y_determination const-decl "bool" Verification nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (final_case_3 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (poweroftwo_to_verification 0
  (poweroftwo_to_verification-1 nil 3930420227
   ("" (skosimp*)
    (("" (expand verification) (("" (grind) nil nil)) nil)) nil)
   ((verification def-decl "bool" Verification nil)) shostak))
 (theorem_12_false_TCC1 0
  (theorem_12_false_TCC1-1 nil 3931107837 ("" (subtype-tcc) nil nil)
   nil nil
   (theorem_12_false subtype "(number_fields./(Verification.x, 2))"
    "int")))
 (theorem_12_false 0
  (theorem_12_false-1 nil 3930490519
   ("" (lemma finalcases1_to_verification)
    (("" (lemma finalcases2_to_verification)
      (("" (lemma finalcases3_to_verification)
        (("" (lemma poweroftwo_to_verification)
          (("" (skeep 1)
            (("" (inst?)
              (("" (inst?)
                (("" (inst?)
                  (("" (inst?)
                    (("" (inst?)
                      (("" (inst?)
                        (("" (inst?)
                          (("" (inst?)
                            (("" (inst?)
                              ((""
                                (inst?)
                                ((""
                                  (simplify)
                                  (("" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finalcases2_to_verification formula-decl nil Verification nil)
    (poweroftwo_to_verification formula-decl nil Verification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finalcases3_to_verification formula-decl nil Verification nil)
    (finalcases1_to_verification formula-decl nil Verification nil))
   shostak)))

