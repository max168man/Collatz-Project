(Collatz
 (Fcltz_TCC1 0
  (Fcltz_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Fcltz subtype "number_fields./(Collatz.n, 2)" "nat")))
 (Pcltz_full_TCC1 0
  (Pcltz_full_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Pcltz_full subtype
    "(number_fields.-)((number_fields.*(3, Collatz.n)), 1)" "nat")))
 (Pcltz_full_TCC2 0
  (Pcltz_full_TCC2-1 nil 3927203796 ("" (termination-tcc) nil nil) nil
   nil
   (Pcltz_full termination
    "Collatz.Pcltz_full((number_fields.-)((number_fields.*(3, Collatz.n)), 1))"
    "nil")))
 (Pcltz_full_TCC3 0
  (Pcltz_full_TCC3-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Pcltz_full subtype "number_fields./(Collatz.n, 2)" "nat")))
 (Pcltz_full_TCC4 0
  (Pcltz_full_TCC4-1 nil 3927203796 ("" (termination-tcc) nil nil) nil
   nil
   (Pcltz_full termination
    "Collatz.Pcltz_full(number_fields./(Collatz.n, 2))" "nil")))
 (lemma_even_div_three_TCC1 0
  (lemma_even_div_three_TCC1-1 nil 3927647358
   ("" (subtype-tcc) nil nil) nil nil
   (lemma_even_div_three subtype "number_fields./(Collatz.k, 3)"
    "int")))
 (lemma_even_div_three_TCC2 0
  (lemma_even_div_three_TCC2-1 nil 3927647358
   ("" (subtype-tcc) nil nil) nil nil
   (lemma_even_div_three subtype "number_fields./(Collatz.k, 3)"
    "int")))
 (lemma7_TCC1 0
  (lemma7_TCC1-1 nil 3927203796
   ("" (skeep) (("" (expand "divides") (("" (grind) nil nil)) nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil))
   nil
   (lemma7 subtype
    "number_fields./(((number_fields.-)(exponentiation.^(2, (number_fields.*(2, Collatz.k))), 1)), 3)"
    "int")))
 (lemma7 0
  (lemma7-1 nil 3927647359
   ("" (induct k)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skeep)
      (("4" (split)
        (("1" (split)
          (("1" (flatten)
            (("1" (expand divides 1)
              (("1" (expand divides)
                (("1" (expand odd?)
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (inst 1 "(4 * x) + 1")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand odd?)
              (("2" (expand divides)
                (("2" (skeep)
                  (("2" (skeep)
                    (("2" (inst 1 "2 * x")
                      (("2" (assert)
                        (("2" (assert)
                          (("2" (mult-by 1 "3")
                            (("2" (assert)
                              (("2"
                                (cross-add 1)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (split)
          (("1" (expand divides)
            (("1" (inst 1 1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (expand odd?)
            (("2" (inst 1 0) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (expand divides)
        (("5" (skeep) (("5" (inst 1 1) (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (expt def-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (lemma_even 0
  (lemma_even-1 nil 3927555796
   ("" (skeep) (("" (expand even?) (("" (grind) nil nil)) nil)) nil)
   ((even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lemma_odd 0
  (lemma_odd-1 nil 3927555884
   ("" (skeep) (("" (expand odd?) (("" (grind) nil nil)) nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lemma9_TCC1 0
  (lemma9_TCC1-1 nil 3927555792 ("" (subtype-tcc) nil nil) nil nil
   (lemma9 subtype
    "number_fields./(((number_fields.-)((number_fields./(((number_fields.-)((exponentiation.^(2, (number_fields.*(2, Collatz.i)))), 1)), 3)), 1)), 3)"
    "int")))
 (lemma9_1_TCC1 0
  (lemma9_1_TCC1-1 nil 3927555792 ("" (subtype-tcc) nil nil) nil nil
   (lemma9_1 subtype
    "number_fields./(((number_fields.-)(number_fields./(Collatz.Yk(Collatz.i), 3), 1)), 3)"
    "int")))
 (lemma10 0
  (lemma10-1 nil 3927203988
   ("" (skeep)
    (("" (expand Fcltz)
      (("" (expand even?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((Fcltz const-decl "nat" Collatz nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil))
   shostak))
 (theorem12 0
  (theorem12-1 nil 3930254343
   ("" (skosimp*)
    (("" (use verification_implies_integer)
      (("" (expand is_integer) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((verification_implies_integer formula-decl nil Collatz nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (is_integer const-decl "bool" Verification nil))
   shostak))
 (theorem12_1_TCC1 0
  (theorem12_1_TCC1-1 nil 3930225019 ("" (subtype-tcc) nil nil) nil nil
   (theorem12_1 subtype "Collatz.x" "posnat")))
 (theorem12_1 0
  (theorem12_1-1 nil 3930225019
   ("" (skosimp*)
    (("" (case "length(str!1) < 1")
      (("1" (expand verification) (("1" (assert) nil nil)) nil)
       ("2" (case "validate_string(str!1) = false")
        (("1" (expand verification) (("1" (assert) nil nil)) nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verification def-decl "bool" Verification nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (FALSE const-decl "bool" booleans nil)
    (validate_string const-decl "bool" Verification nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)))

