(Collatz
 (Fcltz_TCC1 0
  (Fcltz_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Fcltz subtype "number_fields./(Collatz.n, 2)" "nat")))
 (Pcltz_full_TCC1 0
  (Pcltz_full_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Pcltz_full subtype
    "(number_fields.-)((number_fields.*(3, Collatz.n)), 1)" "nat")))
 (Pcltz_full_TCC2 0
  (Pcltz_full_TCC2-1 nil 3927203796 ("" (termination-tcc) nil nil) nil
   nil
   (Pcltz_full termination
    "Collatz.Pcltz_full((number_fields.-)((number_fields.*(3, Collatz.n)), 1))"
    "nil")))
 (Pcltz_full_TCC3 0
  (Pcltz_full_TCC3-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Pcltz_full subtype "number_fields./(Collatz.n, 2)" "nat")))
 (Pcltz_full_TCC4 0
  (Pcltz_full_TCC4-1 nil 3927203796 ("" (termination-tcc) nil nil) nil
   nil
   (Pcltz_full termination
    "Collatz.Pcltz_full(number_fields./(Collatz.n, 2))" "nil")))
 (lemma7_TCC1 0
  (lemma7_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (lemma7 subtype
    "number_fields./(((number_fields.-)(exponentiation.^(2, (number_fields.*(2, Collatz.k))), 1)), 3)"
    "int")))
 (lemma10 0
  (lemma10-1 nil 3927203988
   ("" (skeep)
    (("" (expand Fcltz)
      (("" (expand even?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((Fcltz const-decl "nat" Collatz nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil))
   shostak)))

