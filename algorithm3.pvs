%------------------------------------------------------------------------
%
% Algorithm 3
% Authors: Ali Ebnenasir <aebnenas@mtu.edu>, Maxwell Brainerd <mmbraine@mtu.edu>
% Date: 7/26/2024 - ongoing
%
% This is a helper algorithm to algorithm 2.
% It uses a nested for loop with variable depth n to compute Collatz numbers of the
% jth stair where 2 < qj < j - 2.
%
%------------------------------------------------------------------------

algorithm3: THEORY
BEGIN

IMPORTING Verification
IMPORTING strings
IMPORTING sequences[int]
IMPORTING finite_sequences

empty_sequence: sequence[int] = (LAMBDA (n: nat): 0) % base empty sequence

% test sequences: seq3 = 3, 2, 1

empty_seq_int: finite_sequence[int] = empty_seq


seq1: finite_sequence[int] = add(1, empty_seq_int)
seq2: finite_sequence[int] = add(2, seq1)
seq3: finite_sequence[int] = add(3, seq2)


seq4: finite_sequence[int] = add(4, add(3, add(2, add(1, empty_seq_int))))
seqbased: finite_sequence[int] = add(1, empty_seq_int)

seq5: finite_sequence[int] = o(seq4, seqbased) 

print_finite_seq(seq: finite_sequence[int]): boolean = 
  FORALL(x:subrange(0, length(seq) - 1)):
    print(seq6(x))

print_finite_seq_test(x: int): boolean = 
  print_finite_seq(seq5)


append_loop(seq, base_seq: sequence[int], seq_length: nat): RECURSIVE sequence[int] = 
  IF seq_length = 0 THEN
    add(seq(0), base_seq)
  ELSE
    append_loop(seq, add(seq(seq_length - 1), base_seq), seq_length - 1)
  ENDIF
  MEASURE seq_length


append(x: int, seq, base_seq: sequence[int], seq_length: nat): sequence[int] =
  append_loop(seq, add(x, base_seq), seq_length)


seq1_append: sequence[int] = append(1, empty_sequence, empty_sequence, 0)
seq2_append: sequence[int] = append(2, seq1_append, empty_sequence, 1)
seq3_append: sequence[int] = append(3, seq2_append, empty_sequence, 2)

% This testing method is used to print every member of a sequence, starting from the first to the last.
print_list(seq_length: nat, seq: sequence[nat]): bool =
  print("[") AND
  FORALL(x:subrange(0, seq_length)): 
    IF x /= seq_length THEN
      print(seq(x)) AND print(", ")
    ELSE print(x) AND println("]")
    ENDIF
  AND TRUE

recursiveListCreationBool(l, seq_length: nat, seq: sequence[int]): RECURSIVE bool = % Corresponds to line 8 in algorithm
  IF l = 0 THEN
    LET seq = add(l, seq) IN print_list(seq_length, seq) 
  ELSE
    LET seq = add(l, seq) IN recursiveListCreationBool(l - 1, seq_length + 1, seq) AND print("(For loop) ") AND LET seq = add(l, seq) IN print_list(seq_length + 1, seq)  
  ENDIF
  MEASURE l

recursiveListCreation(l, seq_length: nat, seq: sequence[int]): RECURSIVE sequence[int] = % Corresponds to line 8 in algorithm
  IF l = 0 THEN
    add(l, seq) 
  ELSE
    LET seq = add(l, seq) IN recursiveListCreation(l - 1, seq_length + 1, seq)
  ENDIF
  MEASURE l
    
caseNnotgreaterthan1_innerfor(n, origN, Y_k: int, x, l, j, qj, seq_length: nat, seq: sequence[int]):  boolean = 
  FORALL(x: subrange(0, seq_length - 1)):
    IF (seq(x) < seq(x + 1)) THEN 
      FALSE
    ELSE 
      TRUE
    ENDIF

%%%
%
% caseNnotgreaterthan1_test
%
% This function checks if within the range 0 to nc - 1, if any number in the sequence is less than it's successor.
% If this case occurs, it returns false
%
%%%

caseNnotgreaterthan1_accept(nc: nat, seq: sequence[int]): boolean = 

% Can print through list for testing

FORALL(x: subrange(0, nc - 1)):
  print(seq(x))
AND
  println("")
AND

FORALL(x: subrange(0, nc - 1)):
    IF (seq(x) < seq(x + 1)) THEN 
      FALSE
    ELSE 
      TRUE
    ENDIF
  
% Test function
call_test(seq_length: nat): boolean =
  LET seq = seq3_append IN caseNnotgreaterthan1_accept(seq_length, seq)

%caseNnotgreaterthan1(n, origN, Y_k: int, x, l, j, qj: nat, seq:  sequence[int], seq_length: nat): RECURSIVE boolean =
%  IF x = 0 THEN


%recursiveForEnhanced(n, origN, Y_k: int, x, l, j, qj: nat, seq: sequence[int], seq_length: nat): RECURSIVE boolean =
%  IF (n > 1) THEN
    

%%%
% alg3
% param n: Length of the summation in the later "num" calculation
% origN: 
% Y_k:
% l: Maximum exponent for the powers of 2 used in the summation for num
% j: Current stair
% qj: Passed from algorithm 2
%
% This algorithm calls upon a nested for loop to compute Collatz numbers of the j-th stair where 2 < qj < j - 2.
% It is essentially a "portal" to the actual recursiveFor algorithm; this is done so an empty sequence can be passed into recursiveFor, for later use.
%%%

% n = n - 1
% origN 
%alg3(n, origN, Y_k: int, l, j, qj: nat): boolean =
%  print("alg3 reached, n = ") AND println(n) AND LET sequence = empty_sequence in recursiveForEnhanced(n, origN, Y_k, l, l, j, qj, sequence, 0)


END algorithm3