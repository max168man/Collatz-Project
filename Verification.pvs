%------------------------------------------------------------------------
%
% Verification Algorithm
% Authors: Ali Ebnenasir <aebnenas@mtu.edu>, Maxwell Brainerd <mmbraine@mtu.edu>
% Date: 6/25/2024 - ongoing
%
% This is a helper file to Collatz.pvs.
% It contains a verification algorithm, which verifies whether a value x is a legitimate Collatz number with the
% help of the binary string s as the BVC of x.
%
%------------------------------------------------------------------------

Verification: THEORY
BEGIN

importing stdio   % Used to print output, helping with bugtesting and understanding the results of the algorithm.
importing strings % Used for reading in a BVC string from user.

% This method is used to check if a number is a power of two. 
% I created this since I couldn't get any imported log functions to work.

is_power_of_two(x: nat): RECURSIVE bool = 
    IF x = 1 THEN 
        TRUE
    ELSIF x < 1 THEN
        FALSE
    ELSIF integer_pred(x / 2) AND x > 0 THEN 
        is_power_of_two(x / 2)
    ELSE
        FALSE 
    ENDIF
    MEASURE x

%%%
% Case 1
% This helper method to final_cases is the first of the final three test cases to determine the validity of x.
% If s[k] is 1 and x is even, this is a marker of invalidity.
%%%

final_case_1(x: int, y: int, k: nat, s: string): bool = 
    IF ((strcmp(substr(s, k, k), "1") = 0) AND even?(x)) THEN
        %println("Final case 1 fails!") AND print("index = ") AND print(k) AND print(", x = ") AND print(x) AND print(", string = ") AND println(s) AND 
        FALSE
    ELSE
        TRUE
    ENDIF

%%%
% Case 2
% This helper method to final_cases is the second of the final three test cases to determine the validity of x.
% If s[k] is 1 and x is odd and y is odd, this is a marker of invalidity.
%%%

final_case_2(x, y: int, k: nat, s: string): bool = 
    IF ((strcmp(substr(s, k, k), "1") = 0) AND odd?(x) AND odd?(y)) THEN
        %println("Test case 2 fails!") AND print("index = ") AND print(k) AND print(", x = ") AND print(x) AND print(", string = ") AND println(s) AND 
        FALSE
    ELSE
        TRUE
    ENDIF

%%%
% Case 3
% This helper method to final_cases is the third of the final three test cases to determine the validity of x.
% If s[k] is 0 and x is odd, this is a marker of invalidity.
%%%

final_case_3(x, y: int, k: nat, s: string): bool = 
    IF ((strcmp(substr(s, k, k), "0") = 0) AND odd?(x)) THEN
        %println("Test case 3 fails!") AND print("index = ") AND print(k) AND print(", x = ") AND print(x) AND print(", string = ") AND println(s) AND 
        FALSE
    ELSE
        TRUE
    ENDIF

% final_cases
% This helper method to y_determination is the final five test cases to determine the validity of x
% 1: If y is < 1, this is a marker of invalidity
% 2: If y is a power of two this is a marker of invalidity
% 3: If s[k] is 1 and x is even, this is a marker of invalidity.
% 4: If s[k] is 1 and x is odd and y is odd, this is a marker of invalidity.
% 5: If s[k] is 0 and x is odd, this is a marker of invalidity.
%%%


final_cases(x, y: int, k: nat, s: string): bool =
     %print("String: ") AND println(s) AND
    % Test case 1
    IF (y < 1) THEN
        %print("y value at index ") AND print(k) AND println(" is less than 1.") AND 
        FALSE
    % Test case 2
    ELSIF (is_power_of_two(y) = TRUE) THEN
        %print("y is a power of two at index ") AND print(k) AND println(" is a power of two.") AND 
        FALSE
    % Test case 3 
    ELSIF final_case_1(x, y, k, s) = FALSE THEN
        %println("Test case 3 fails!") AND print("index = ") AND print(k) AND print(", x = ") AND print(x) AND print(", string = ") AND println(s) AND 
        FALSE
    ELSIF final_case_2(x, y, k, s) = FALSE THEN
        %println("Test case 4 fails!") AND print("index = ") AND print(k) AND print(", x = ") AND print(x) AND print(", string = ") AND println(s) AND 
        FALSE
    ELSIF final_case_3(x, y, k, s) = FALSE THEN
        %println("Test case 5 fails!") AND print("index = ") AND print(k) AND print(", x = ") AND print(x) AND print(", string = ") AND println(s) AND 
        FALSE
    ELSE
        TRUE
    ENDIF

%%%
% y_calculation
% param s: BVC to use for reference
% param x: x value that y will be calculated from
%
% This helper method determines the y value of an x value given it's bvc. It is used by verification.
%%%

y_calculation(x: int, s: string, len: posint): real =
    % If the number at index is 0:
    IF (strcmp(substr(s, (len - 1), (len - 1)), "0") = 0) THEN
        (x / 2)
    % If the number isn't 0 (it is then 1)
    ELSE
        (3 * x) + 1
    ENDIF

%%%
% y_determination
% param s: BVC to be iterated through
% param x: Collatz number candidate
%
% This helper method to verification() iterates through each index of the BVC, and determines what it's corresponding y value is.
% This y value is crucial, because it is the parent of x, and x and y are used to determine that R(x) has been applied correctly. This is used in the verification process.
% Using x, y, the index and s, these parameters are inputted into the final helper method to determine the validity of X and it's BVC.
% NOTE: Unlike in validate_string(), this method starts from the least significant bit (from last index to first)
%%%

y_determination(x: int, s: string, len: posint): bool =
    % If the number at index is 0:
    IF (strcmp(substr(s, (len - 1), (len - 1)), "0") = 0) THEN
        final_cases(x, (x / 2), (len - 1), s)
        % If the number isn't 0 (it is then 1)
    ELSE
        final_cases(x, ((3 * x) + 1), (len - 1), s)
    ENDIF


%%%
% validate_string()
% param s: BVC to be checked
%
% This helper method to verification checks if a BVC contains only 0's and 1's.
% If so, it alerts the user to what the invalid character is and where it is located.
% It then returns false.
%%%

validate_string(s: string, len: nat): bool =
% Iterates through all indexes of string
    FORALL(k:subrange(0, (len - 1))): 
        % If the substring at index k isn't 0 or 1, prints error message and returns false.
        IF (strcmp(substr(s, k, k), "0") /= 0 AND strcmp(substr(s, k, k), "1") /= 0) THEN
            print("Invalid character ") AND print(substr(s, k, k)) AND print(" found at index ") AND println(k) AND 
            FALSE
        ELSE
            TRUE
        ENDIF

%%%
% verification
% param x: Collatz number candidate
% s: BVC of x
%
% This method verifies x is a Collatz number, with the help of it's binary string s.
% It uses command line input in PVSio, and runs through three sanity checks before calling it's helper method, y_determination
% 1: Checks if BVC isn't empty
% 2: Checks if all characters in string are 0 or 1, using helper method validate_string.
% 3: Checks if x is 2 to the power of some number; if so, x cannot be a Collatz number.
% Once these cases have been checked, x and s are handed off to y_determination.
%%%

verification(x: int, s: string, len: nat): RECURSIVE bool =
    % Test case 1
    IF len < 1 THEN
        println("BVC length must be greater than zero!") AND 
        FALSE
    % Test case 2
    ELSIF (validate_string(s, len) = FALSE) THEN
        println("All characters in string must be 0 or 1!") AND 
        FALSE
    % Test case 3
    ELSIF (is_power_of_two(x) = TRUE) THEN
        println("x cannot be a power of two!") AND 
        FALSE
    % Handed off to helper function
    ELSIF (y_determination(x, s, len) = FALSE) THEN
        FALSE 
    ELSIF (len = 1) THEN
        TRUE
    ELSE
        verification(y_calculation(x, s, len), substr(s, 0, len - 2), len - 1)    
    ENDIF
    MEASURE len

verification_portal(x: int, s: string): bool = 
    IF verification(x, s, length(s)) = TRUE THEN
        TRUE
    ELSE
        FALSE
        ENDIF 

%%% Proofs %%%

%%% Power of two %%%
% These two proofs relate to the critical helper function, is_power_of_two.
%%%

% @QED lemma_power_two_true proved by mmbraine on Sat, 20 Jul 2024 19:30:03 GMT
lemma_power_two_true: LEMMA
    FORALL (n: nat):
        is_power_of_two(2^n) = TRUE

% @QED lemma_power_two_false proved by mmbraine on Sat, 20 Jul 2024 18:06:36 GMT
lemma_power_two_false: LEMMA
    FORALL (x: nat):
        NOT is_power_of_two(x) => NOT EXISTS (n: nat): 2^n = x

%%% 
% These three algorithms prove that if a final case isn't correct, final_cases itself will be false.
%%%

%%%
% @QED finalcase1_to_finalcases proved by mmbraine on Fri, 19 Jul 2024 21:54:30 GMT
finalcase1_to_finalcases: LEMMA FORALL (x, y: int, k: nat, s: string): 
    NOT final_case_1(x, y, k, s) => NOT final_cases(x, y, k, s)

% @QED finalcase2_to_finalcases proved by mmbraine on Fri, 19 Jul 2024 21:58:23 GMT
finalcase2_to_finalcases: LEMMA FORALL (x, y: int, k: nat, s: string): 
    NOT final_case_2(x, y, k, s) => NOT final_cases(x, y, k, s)
   
% @QED finalcase3_to_finalcases proved by mmbraine on Fri, 19 Jul 2024 21:58:11 GMT
finalcase3_to_finalcases: LEMMA FORALL (x, y: int, k: nat, s: string): 
    NOT final_case_3(x, y, k, s) => NOT final_cases(x, y, k, s)

% This final proof proves that if final cases is false for either case of the collatz function, verification will be false.

% @QED finalcases_to_verification proved by mmbraine on Fri, 19 Jul 2024 22:17:39 GMT
finalcases_to_verification: LEMMA FORALL (x, y, k, len: int, s: string):
    NOT final_cases(x, (x / 2), (len - 1), s)
    AND NOT final_cases(x, ((3 * x) + 1), (len - 1), s) =>
    NOT verification(x, s, len)

%%%
% These three proofs prove that if any of these three binary string cases are violated:
% 1. The parent of x, denoted y, is generated by 3x + 1 and y is a natural value that is a power of two, then x can't be even.
% 2. X and y are both odd when the rule 3x + 1 is applied
% 3. X/2 is applied when x is not even.
% Then, verification is false.
%%%

% @QED finalcases1_to_verification proved by mmbraine on Fri, 19 Jul 2024 23:07:58 GMT
finalcases1_to_verification: LEMMA FORALL (x, y, k, len: int, s: string):
    NOT final_case_1(x, (x / 2), (len - 1), s) AND 
    NOT final_case_1(x, ((3 * x) + 1), (len - 1), s) =>
    NOT verification(x, s, len)

% @QED finalcases2_to_verification proved by mmbraine on Sat, 20 Jul 2024 19:16:35 GMT
finalcases2_to_verification: LEMMA FORALL (x, y, k, len: int, s: string):
    NOT final_case_2(x, (x / 2), (len - 1), s) AND 
    NOT final_case_2(x, ((3 * x) + 1), (len - 1), s) =>
    NOT verification(x, s, len)

% @QED finalcase3_to_verification proved by mmbraine on Fri, 19 Jul 2024 23:03:43 GMT
finalcases3_to_verification: LEMMA FORALL (x, y, k: int, len: nat, s: string):
    NOT final_case_3(x, (x / 2), (len - 1), s) AND 
    NOT final_case_3(x, ((3 * x) + 1), (len - 1), s) =>
    NOT verification(x, s, len)

%%%
% This proof proves that if x is a power of two, then verification is false.
%%%

% @QED poweroftwo_to_verification proved by mmbraine on Fri, 19 Jul 2024 23:24:07 GMT
poweroftwo_to_verification: LEMMA FORALL (x, len: nat, s: string):
    is_power_of_two(x) => NOT verification(x, s, len)

%%%
% This final proof proves that if any of the final cases are violated or x is a power of two, then verification is false.
%%%

% @QED theorem_12_false proved by mmbraine on Sat, 20 Jul 2024 18:57:07 GMT
theorem_12_false: LEMMA FORALL (y, k: int, x, len: nat, s: string):
    NOT final_case_1(x, (x / 2), (len - 1), s) AND NOT final_case_1(x, ((3 * x) + 1), (len - 1), s) OR
    NOT final_case_2(x, (x / 2), (len - 1), s) AND NOT final_case_2(x, ((3 * x) + 1), (len - 1), s) OR
    NOT final_case_3(x, (x / 2), (len - 1), s) AND NOT final_case_3(x, ((3 * x) + 1), (len - 1), s) OR
    is_power_of_two(x) =>
    NOT verification(x, s, len)

END Verification