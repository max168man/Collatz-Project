%% TCCs associated with theory algorithm3test
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm3test_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 22, column 30) for
	% add(2, add(2, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq22_TCC1: OBLIGATION
	FORALL (x1: below[add[real](2, add[real](2, empty_seq_int))`length]):
	    rational_pred(add[real](2, add[real](2, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](2, add[real](2, empty_seq_int))`seq(x1))
	
	% Subtype TCC generated (at line 23, column 30) for
	% add(1, add(2, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq21_TCC1: OBLIGATION
	FORALL (x1: below[add[real](1, add[real](2, empty_seq_int))`length]):
	    rational_pred(add[real](1, add[real](2, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](1, add[real](2, empty_seq_int))`seq(x1))
	
	% Subtype TCC generated (at line 24, column 30) for
	% add(0, add(2, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq20_TCC1: OBLIGATION
	FORALL (x1: below[add[real](0, add[real](2, empty_seq_int))`length]):
	    rational_pred(add[real](0, add[real](2, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](0, add[real](2, empty_seq_int))`seq(x1))
	
	% Subtype TCC generated (at line 25, column 30) for
	% add(1, add(1, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq11_TCC1: OBLIGATION
	FORALL (x1: below[add[real](1, add[real](1, empty_seq_int))`length]):
	    rational_pred(add[real](1, add[real](1, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](1, add[real](1, empty_seq_int))`seq(x1))
	
	% Subtype TCC generated (at line 26, column 30) for
	% add(0, add(1, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq10_TCC1: OBLIGATION
	FORALL (x1: below[add[real](0, add[real](1, empty_seq_int))`length]):
	    rational_pred(add[real](0, add[real](1, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](0, add[real](1, empty_seq_int))`seq(x1))
	
	% Subtype TCC generated (at line 27, column 30) for
	% add(0, add(0, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq00_TCC1: OBLIGATION
	FORALL (x1: below[add[real](0, add[real](0, empty_seq_int))`length]):
	    rational_pred(add[real](0, add[real](0, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](0, add[real](0, empty_seq_int))`seq(x1))
	
	% Subtype TCC generated (at line 30, column 31) for
	% add(2, add(2, add(2, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq222_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (2, add[real](2, add[real](2, empty_seq_int)))`length]):
	    rational_pred(add[real](2, add[real](2, add[real](2, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](2, add[real](2, add[real](2, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 31, column 31) for
	% add(0, add(0, add(2, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq200_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0, add[real](0, add[real](2, empty_seq_int)))`length]):
	    rational_pred(add[real](0, add[real](0, add[real](2, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](0, add[real](0, add[real](2, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 32, column 31) for
	% add(1, add(1, add(1, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq111_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (1, add[real](1, add[real](1, empty_seq_int)))`length]):
	    rational_pred(add[real](1, add[real](1, add[real](1, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](1, add[real](1, add[real](1, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 33, column 31) for
	% add(0, add(1, add(1, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq110_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0, add[real](1, add[real](1, empty_seq_int)))`length]):
	    rational_pred(add[real](0, add[real](1, add[real](1, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](0, add[real](1, add[real](1, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 34, column 31) for
	% add(0, add(0, add(1, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq100_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0, add[real](0, add[real](1, empty_seq_int)))`length]):
	    rational_pred(add[real](0, add[real](0, add[real](1, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](0, add[real](0, add[real](1, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 35, column 31) for
	% add(0, add(0, add(0, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq000_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0, add[real](0, add[real](0, empty_seq_int)))`length]):
	    rational_pred(add[real](0, add[real](0, add[real](0, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](0, add[real](0, add[real](0, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 36, column 31) for
	% add(1, add(2, add(2, empty_seq_int)))
	% expected type  finite_sequence[int]
	  % untried
	seq221_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (1, add[real](2, add[real](2, empty_seq_int)))`length]):
	    rational_pred(add[real](1, add[real](2, add[real](2, empty_seq_int)))`seq
	                      (x1))
	     AND
	     integer_pred(add[real](1, add[real](2, add[real](2, empty_seq_int)))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 40, column 32) for
	% add(1, add(1, add(1, add(2, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq2111_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (1,
	                       add[real]
	                           (1,
	                            add[real]
	                                (1, add[real](2, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (1,
	                       add[real]
	                           (1, add[real](1, add[real](2, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (1,
	                       add[real]
	                           (1, add[real](1, add[real](2, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 41, column 32) for
	% add(0, add(1, add(1, add(2, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq2110_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (1,
	                            add[real]
	                                (1, add[real](2, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (1, add[real](1, add[real](2, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (1, add[real](1, add[real](2, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 42, column 32) for
	% add(0, add(0, add(1, add(2, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq2100_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (0,
	                            add[real]
	                                (1, add[real](2, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](1, add[real](2, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](1, add[real](2, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 43, column 32) for
	% add(0, add(0, add(0, add(2, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq2000_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (0,
	                            add[real]
	                                (0, add[real](2, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](0, add[real](2, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](0, add[real](2, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 44, column 32) for
	% add(1, add(1, add(1, add(1, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq1111_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (1,
	                       add[real]
	                           (1,
	                            add[real]
	                                (1, add[real](1, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (1,
	                       add[real]
	                           (1, add[real](1, add[real](1, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (1,
	                       add[real]
	                           (1, add[real](1, add[real](1, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 45, column 32) for
	% add(0, add(1, add(1, add(1, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq1110_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (1,
	                            add[real]
	                                (1, add[real](1, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (1, add[real](1, add[real](1, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (1, add[real](1, add[real](1, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 46, column 32) for
	% add(0, add(0, add(1, add(1, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq1100_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (0,
	                            add[real]
	                                (1, add[real](1, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](1, add[real](1, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](1, add[real](1, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 47, column 32) for
	% add(0, add(0, add(0, add(1, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq1000_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (0,
	                            add[real]
	                                (0, add[real](1, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](0, add[real](1, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](0, add[real](1, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 48, column 32) for
	% add(0, add(0, add(0, add(0, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq0000_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (0,
	                       add[real]
	                           (0,
	                            add[real]
	                                (0, add[real](0, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](0, add[real](0, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (0,
	                       add[real]
	                           (0, add[real](0, add[real](0, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 58, column 9) for  0
	% expected type  below[length(seq)]
	  % untried
	BVCcalculatorBoolcase0_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): 0 < seq`length
	
	% Subtype TCC generated (at line 61, column 40) for  j - 2 - length(str)
	% expected type  nat
	  % untried
	BVCcalculatorBoolcase0_TCC2: OBLIGATION
	FORALL (j: nat, str: string, seq: finite_sequence[int]):
	    finseq_appl[int](seq)(0) = 0 AND printstr("case i = 0, seq(i) = 0, ")
	     IMPLIES
	     FORALL (str1: string):
	       str1 = (concat("1", str)) IMPLIES j - 2 - str1`length >= 0
	
	% Subtype TCC generated (at line 62, column 21) for  1
	% expected type  below[length(seq)]
	  % untried
	BVCcalculatorBoolcase0_TCC3: OBLIGATION
	FORALL (seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 IMPLIES 1 < seq`length
	
	% Subtype TCC generated (at line 65, column 40) for  j - 2 - length(str)
	% expected type  nat
	  % untried
	BVCcalculatorBoolcase0_TCC4: OBLIGATION
	FORALL (j: nat, str: string, seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 AND
	     finseq_appl[int](seq)(0) = finseq_appl[int](seq)(1) AND
	      printstr("case i = 0, seq(i) = seq(i + 1), ")
	     IMPLIES
	     FORALL (str1: string):
	       str1 = (concat("1", str)) IMPLIES j - 2 - str1`length >= 0
	
	% Subtype TCC generated (at line 68, column 55) for
	% finseq_appl[int](seq)(0) - finseq_appl[int](seq)(1)
	% expected type  nat
	  % untried
	BVCcalculatorBoolcase0_TCC5: OBLIGATION
	FORALL (seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 AND
	     NOT finseq_appl[int](seq)(0) = finseq_appl[int](seq)(1) AND
	      printstr("case i = 0, else, ")
	     IMPLIES finseq_appl[int](seq)(0) - finseq_appl[int](seq)(1) >= 0
	
	% Subtype TCC generated (at line 69, column 43) for  j - 2 - length(str)
	% expected type  nat
	  % untried
	BVCcalculatorBoolcase0_TCC6: OBLIGATION
	FORALL (j: nat, str: string, seq: finite_sequence[int]):
	    NOT finseq_appl[int](seq)(0) = 0 AND
	     NOT finseq_appl[int](seq)(0) = finseq_appl[int](seq)(1) AND
	      printstr("case i = 0, else, ")
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        (concat("1",
	                concatenate_recur(str, "0",
	                                  finseq_appl[int](seq)(0) -
	                                   finseq_appl[int](seq)(1),
	                                  TRUE)))
	        IMPLIES j - 2 - str1`length >= 0
	
	% The subtype TCC (at line 62, column 12) in decl BVCcalculatorBoolcase0 for  0
	% expected type  below[seq`length]
	% The subtype TCC (at line 68, column 59) in decl BVCcalculatorBoolcase0 for  0
	% expected type  below[seq`length]
	% The subtype TCC (at line 68, column 68) in decl BVCcalculatorBoolcase0 for  1
	% expected type  below[seq`length]
	% Subtype TCC generated (at line 75, column 13) for  i
	% expected type  below[length(seq)]
	  % untried
	BVCcalculatorBool_TCC1: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) IMPLIES i < seq`length
	
	% The subtype TCC (at line 62, column 12) in decl BVCcalculatorBoolcase0 for  0
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBoolcase0_TCC1
	% The subtype TCC (at line 68, column 59) in decl BVCcalculatorBoolcase0 for  0
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBoolcase0_TCC1
	% The subtype TCC (at line 68, column 68) in decl BVCcalculatorBoolcase0 for  1
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBoolcase0_TCC3
	
	% Subtype TCC generated (at line 78, column 22) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculatorBool_TCC2: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     (finseq_appl[int](seq)(i) = 0) AND
	      printstr(concat("case seq(i) = 0: ", newline)) AND
	       printstr(concat(concat("1", str), newline))
	     IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 78, column 4) for
	% BVCcalculatorBool(i - 1, j, concat("1", str), seq)
	  % untried
	BVCcalculatorBool_TCC3: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     (finseq_appl[int](seq)(i) = 0) AND
	      printstr(concat("case seq(i) = 0: ", newline)) AND
	       printstr(concat(concat("1", str), newline))
	     IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 81, column 52) for
	% finseq_appl[int](seq)(i)
	% expected type  nat
	  % untried
	BVCcalculatorBool_TCC4: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND
	      (i = seq`length - 1) AND printstr("Case i = len(mlist) - 1: ")
	     IMPLIES finseq_appl[int](seq)(i) >= 0
	
	% Subtype TCC generated (at line 83, column 24) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculatorBool_TCC5: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (i = seq`length - 1) AND printstr("Case i = len(mlist) - 1: ")
	     AND printstr(concat(concat("1",
	                                concatenate_recur(str,
	                                                  "0",
	                                                  finseq_appl[int](seq)(i),
	                                                  TRUE)),
	                         newline))
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        concat("1",
	               concatenate_recur(str, "0", finseq_appl[int](seq)(i), TRUE))
	        IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 83, column 6) for
	% BVCcalculatorBool(i - 1, j, str, seq)
	  % untried
	BVCcalculatorBool_TCC6: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (i = seq`length - 1) AND printstr("Case i = len(mlist) - 1: ")
	     AND printstr(concat(concat("1",
	                                concatenate_recur(str,
	                                                  "0",
	                                                  finseq_appl[int](seq)(i),
	                                                  TRUE)),
	                         newline))
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        concat("1",
	               concatenate_recur(str, "0", finseq_appl[int](seq)(i), TRUE))
	        IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 84, column 22) for  i + 1
	% expected type  below[length(seq)]
	  % untried
	BVCcalculatorBool_TCC7: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	    NOT (i = 0) AND
	     NOT (finseq_appl[int](seq)(i) = 0) AND NOT (i = seq`length - 1)
	     IMPLIES i + 1 < seq`length
	
	% Subtype TCC generated (at line 88, column 24) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculatorBool_TCC8: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (NOT (i = seq`length - 1))
	     AND (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1))
	     AND printstr("Case mlist[i] = mlist[i + 1]: ")
	     AND printstr(concat(concat("1", str), newline))
	     IMPLIES FORALL (str1: string): str1 = concat("1", str) IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 88, column 6) for
	% BVCcalculatorBool(i - 1, j, str, seq)
	  % untried
	BVCcalculatorBool_TCC9: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (NOT (i = seq`length - 1))
	     AND (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1))
	     AND printstr("Case mlist[i] = mlist[i + 1]: ")
	     AND printstr(concat(concat("1", str), newline))
	     IMPLIES FORALL (str1: string): str1 = concat("1", str) IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 91, column 40) for
	% finseq_appl[int](seq)(i) - finseq_appl[int](seq)(i + 1)
	% expected type  nat
	  % untried
	BVCcalculatorBool_TCC10: OBLIGATION
	FORALL (i: nat, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (NOT (i = seq`length - 1))
	     AND (NOT (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1)))
	     AND printstr("Case else ")
	     IMPLIES finseq_appl[int](seq)(i) - finseq_appl[int](seq)(i + 1) >= 0
	
	% Subtype TCC generated (at line 93, column 24) for  i - 1
	% expected type  nat
	  % untried
	BVCcalculatorBool_TCC11: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (NOT (i = seq`length - 1))
	     AND (NOT (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1)))
	     AND printstr("Case else ")
	     AND printstr(concat(concatenate_recur(str,
	                                           "0",
	                                           finseq_appl[int](seq)(i)
	                                           -
	                                           finseq_appl[int](seq)(i + 1),
	                                           TRUE),
	                         newline))
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        concat("1",
	               concatenate_recur(str, "0",
	                                 finseq_appl[int](seq)(i) -
	                                  finseq_appl[int](seq)(i + 1),
	                                 TRUE))
	        IMPLIES i - 1 >= 0
	
	% Termination TCC generated (at line 93, column 6) for
	% BVCcalculatorBool(i - 1, j, str, seq)
	  % untried
	BVCcalculatorBool_TCC12: OBLIGATION
	FORALL (i: nat, str: string, seq: finite_sequence[int]):
	         (NOT (i = 0)) AND (NOT (finseq_appl[int](seq)(i) = 0))
	     AND (NOT (i = seq`length - 1))
	     AND (NOT (finseq_appl[int](seq)(i) = finseq_appl[int](seq)(i + 1)))
	     AND printstr("Case else ")
	     AND printstr(concat(concatenate_recur(str,
	                                           "0",
	                                           finseq_appl[int](seq)(i)
	                                           -
	                                           finseq_appl[int](seq)(i + 1),
	                                           TRUE),
	                         newline))
	     IMPLIES
	     FORALL (str1: string):
	       str1 =
	        concat("1",
	               concatenate_recur(str, "0",
	                                 finseq_appl[int](seq)(i) -
	                                  finseq_appl[int](seq)(i + 1),
	                                 TRUE))
	        IMPLIES i - 1 < i
	
	% The subtype TCC (at line 81, column 56) in decl BVCcalculatorBool for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 82, column 58) in decl BVCcalculatorBool for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 82, column 54) in decl BVCcalculatorBool for  finseq_appl[int](seq)(i)
	% expected type  nat
	% The subtype TCC (at line 84, column 13) in decl BVCcalculatorBool for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 91, column 44) in decl BVCcalculatorBool for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 91, column 53) in decl BVCcalculatorBool for  i + 1
	% expected type  below[seq`length]
	% The subtype TCC (at line 92, column 58) in decl BVCcalculatorBool for  i
	% expected type  below[seq`length]
	% The subtype TCC (at line 92, column 67) in decl BVCcalculatorBool for  i + 1
	% expected type  below[seq`length]
	% The subtype TCC (at line 92, column 54) in decl BVCcalculatorBool for
	%  finseq_appl[int](seq)(i) - finseq_appl[int](seq)(i + 1)
	% expected type  nat
	% Subtype TCC generated (at line 106, column 39) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest22_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq22 IMPLIES seq`length - 1 >= 0
	
	% The subtype TCC (at line 81, column 56) in decl BVCcalculatorBool for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC1
	% The subtype TCC (at line 82, column 58) in decl BVCcalculatorBool for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC1
	% The subtype TCC (at line 82, column 54) in decl BVCcalculatorBool for  finseq_appl[int](seq)(i)
	    % expected type  nat
	  % is subsumed by BVCcalculatorBool_TCC4
	% The subtype TCC (at line 84, column 13) in decl BVCcalculatorBool for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC1
	% The subtype TCC (at line 91, column 44) in decl BVCcalculatorBool for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC1
	% The subtype TCC (at line 91, column 53) in decl BVCcalculatorBool for  i + 1
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC7
	% The subtype TCC (at line 92, column 58) in decl BVCcalculatorBool for  i
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC1
	% The subtype TCC (at line 92, column 67) in decl BVCcalculatorBool for  i + 1
	    % expected type  below[seq`length]
	  % is subsumed by BVCcalculatorBool_TCC7
	% The subtype TCC (at line 92, column 54) in decl BVCcalculatorBool for
	    %  finseq_appl[int](seq)(i) - finseq_appl[int](seq)(i + 1)
	    % expected type  nat
	  % is subsumed by BVCcalculatorBool_TCC10
	
	% Subtype TCC generated (at line 109, column 39) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest21_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq21 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 112, column 39) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest20_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq20 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 115, column 39) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest11_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq11 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 118, column 39) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest10_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq10 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 121, column 39) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest00_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq00 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 126, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest222_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq222 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 129, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest200_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq200 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 132, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest111_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq111 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 135, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest110_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq110 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 138, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest100_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq100 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 141, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest000_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq000 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 144, column 40) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest221_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq221 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 149, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest2111_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq2111 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 152, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest2110_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq2110 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 155, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest2100_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq2100 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 158, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest2000_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq2000 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 161, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest1111_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq1111 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 164, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest1110_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq1110 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 167, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest1100_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq1100 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 170, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest1000_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq1000 IMPLIES seq`length - 1 >= 0
	
	% Subtype TCC generated (at line 173, column 41) for  length(seq) - 1
	% expected type  nat
	  % untried
	BoolBVCcalculatorTest0000_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int]): seq = seq0000 IMPLIES seq`length - 1 >= 0
	
	% The subtype TCC (at line 178, column 35) in decl BVCcalculatorTest22 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 181, column 35) in decl BVCcalculatorTest21 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 184, column 35) in decl BVCcalculatorTest20 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 187, column 35) in decl BVCcalculatorTest11 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 190, column 35) in decl BVCcalculatorTest10 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 193, column 35) in decl BVCcalculatorTest00 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 198, column 36) in decl BVCcalculatorTest222 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 201, column 36) in decl BVCcalculatorTest200 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 204, column 36) in decl BVCcalculatorTest111 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 207, column 36) in decl BVCcalculatorTest110 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 210, column 36) in decl BVCcalculatorTest100 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 213, column 36) in decl BVCcalculatorTest000 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 216, column 36) in decl BVCcalculatorTest221 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 221, column 37) in decl BVCcalculatorTest2111 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 224, column 37) in decl BVCcalculatorTest2110 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 227, column 37) in decl BVCcalculatorTest2100 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 230, column 37) in decl BVCcalculatorTest2000 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 233, column 37) in decl BVCcalculatorTest1111 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 236, column 37) in decl BVCcalculatorTest1110 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 239, column 37) in decl BVCcalculatorTest1100 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 242, column 37) in decl BVCcalculatorTest1000 for  seq`length - 1
	% expected type  nat
	% The subtype TCC (at line 245, column 37) in decl BVCcalculatorTest0000 for  seq`length - 1
	% expected type  nat
	% Subtype TCC generated (at line 347, column 30) for
	% add(1, add(4, empty_seq_int))
	% expected type  finite_sequence[int]
	  % untried
	seq41_TCC1: OBLIGATION
	FORALL (x1: below[add[real](1, add[real](4, empty_seq_int))`length]):
	    rational_pred(add[real](1, add[real](4, empty_seq_int))`seq(x1)) AND
	     integer_pred(add[real](1, add[real](4, empty_seq_int))`seq(x1))
	
	% The subtype TCC (at line 178, column 35) in decl BVCcalculatorTest22 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest22_TCC1
	% The subtype TCC (at line 181, column 35) in decl BVCcalculatorTest21 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest21_TCC1
	% The subtype TCC (at line 184, column 35) in decl BVCcalculatorTest20 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest20_TCC1
	% The subtype TCC (at line 187, column 35) in decl BVCcalculatorTest11 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest11_TCC1
	% The subtype TCC (at line 190, column 35) in decl BVCcalculatorTest10 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest10_TCC1
	% The subtype TCC (at line 193, column 35) in decl BVCcalculatorTest00 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest00_TCC1
	% The subtype TCC (at line 198, column 36) in decl BVCcalculatorTest222 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest222_TCC1
	% The subtype TCC (at line 201, column 36) in decl BVCcalculatorTest200 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest200_TCC1
	% The subtype TCC (at line 204, column 36) in decl BVCcalculatorTest111 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest111_TCC1
	% The subtype TCC (at line 207, column 36) in decl BVCcalculatorTest110 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest110_TCC1
	% The subtype TCC (at line 210, column 36) in decl BVCcalculatorTest100 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest100_TCC1
	% The subtype TCC (at line 213, column 36) in decl BVCcalculatorTest000 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest000_TCC1
	% The subtype TCC (at line 216, column 36) in decl BVCcalculatorTest221 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest221_TCC1
	% The subtype TCC (at line 221, column 37) in decl BVCcalculatorTest2111 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest2111_TCC1
	% The subtype TCC (at line 224, column 37) in decl BVCcalculatorTest2110 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest2110_TCC1
	% The subtype TCC (at line 227, column 37) in decl BVCcalculatorTest2100 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest2100_TCC1
	% The subtype TCC (at line 230, column 37) in decl BVCcalculatorTest2000 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest2000_TCC1
	% The subtype TCC (at line 233, column 37) in decl BVCcalculatorTest1111 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest1111_TCC1
	% The subtype TCC (at line 236, column 37) in decl BVCcalculatorTest1110 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest1110_TCC1
	% The subtype TCC (at line 239, column 37) in decl BVCcalculatorTest1100 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest1100_TCC1
	% The subtype TCC (at line 242, column 37) in decl BVCcalculatorTest1000 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest1000_TCC1
	% The subtype TCC (at line 245, column 37) in decl BVCcalculatorTest0000 for  seq`length - 1
	    % expected type  nat
	  % is subsumed by BoolBVCcalculatorTest0000_TCC1
	
	% Subtype TCC generated (at line 361, column 15) for  n
	% expected type  nat
	  % untried
	recursiveForTest_TCC1: OBLIGATION
	FORALL (n: int): n >= 0

END algorithm3test_TCCS