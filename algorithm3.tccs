%% TCCs associated with theory algorithm3
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm3_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 32, column 31) for  add(1, empty_seq_int)
	% expected type  finite_sequence[int]
	  % untried
	seq1_TCC1: OBLIGATION
	FORALL (x1: below[add[real](1, empty_seq_int)`length]):
	    rational_pred(add[real](1, empty_seq_int)`seq(x1)) AND
	     integer_pred(add[real](1, empty_seq_int)`seq(x1))
	
	% Subtype TCC generated (at line 33, column 31) for  add(2, seq1)
	% expected type  finite_sequence[int]
	  % untried
	seq2_TCC1: OBLIGATION
	FORALL (x1: below[add[real](2, seq1)`length]):
	    rational_pred(add[real](2, seq1)`seq(x1)) AND
	     integer_pred(add[real](2, seq1)`seq(x1))
	
	% Subtype TCC generated (at line 34, column 31) for  add(3, seq2)
	% expected type  finite_sequence[int]
	  % untried
	seq3_TCC1: OBLIGATION
	FORALL (x1: below[add[real](3, seq2)`length]):
	    rational_pred(add[real](3, seq2)`seq(x1)) AND
	     integer_pred(add[real](3, seq2)`seq(x1))
	
	% Subtype TCC generated (at line 37, column 31) for
	% add(4, add(3, add(2, add(1, empty_seq_int))))
	% expected type  finite_sequence[int]
	  % untried
	seq4_TCC1: OBLIGATION
	FORALL (x1:
	            below[add[real]
	                      (4,
	                       add[real]
	                           (3,
	                            add[real]
	                                (2, add[real](1, empty_seq_int))))`length]):
	    rational_pred(add[real]
	                      (4,
	                       add[real]
	                           (3, add[real](2, add[real](1, empty_seq_int))))`seq
	                      (x1))
	     AND
	     integer_pred(add[real]
	                      (4,
	                       add[real]
	                           (3, add[real](2, add[real](1, empty_seq_int))))`seq
	                      (x1))
	
	% Subtype TCC generated (at line 40, column 15) for  x
	% expected type  below[length(seq4)]
	  % untried
	print_finite_seq_TCC1: OBLIGATION
	FORALL (seq: finite_sequence[int], x: subrange(0, seq`length - 1)):
	    x >= 0 AND x < seq4`length
	
	% Subtype TCC generated (at line 50, column 29) for  seq_length - 1
	% expected type  nat
	  % untried
	append_loop_TCC1: OBLIGATION
	FORALL (seq_length: nat): NOT seq_length = 0 IMPLIES seq_length - 1 >= 0
	
	% Termination TCC generated (at line 50, column 4) for
	% append_loop(seq, add(seq(seq_length - 1), base_seq), seq_length - 1)
	  % untried
	append_loop_TCC2: OBLIGATION
	FORALL (seq_length: nat):
	    NOT seq_length = 0 IMPLIES seq_length - 1 < seq_length
	
	% The subtype TCC (at line 50, column 57) in decl append_loop for  seq_length - 1
	% expected type  nat
	% Subtype TCC generated (at line 75, column 52) for  seq
	% expected type  sequence[nat]
	  % untried
	recursiveListCreationBool_TCC1: OBLIGATION
	FORALL (l: nat, seq: sequence[int], seq1: sequence[int]):
	    l = 0 AND seq1 = add(l, seq) IMPLIES FORALL (x1: nat): seq1(x1) >= 0
	
	% The subtype TCC (at line 50, column 57) in decl append_loop for  seq_length - 1
	    % expected type  nat
	  % is subsumed by append_loop_TCC1
	
	% Subtype TCC generated (at line 77, column 164) for  seq
	% expected type  sequence[nat]
	  % untried
	recursiveListCreationBool_TCC2: OBLIGATION
	FORALL (l: nat, v: [{z: [nat, nat, sequence[int]] | z`1 < l} -> bool],
	          seq_length: nat, seq: sequence[int]):
	    NOT l = 0 IMPLIES
	     FORALL (seq2: sequence[int]):
	       seq2 = add(l, seq) AND
	        v(l - 1, seq_length + 1, seq2) AND printstr("(For loop) ")
	        IMPLIES
	        FORALL (seq1: sequence[int]):
	          seq1 = add(l, seq2) IMPLIES FORALL (x1: nat): seq1(x1) >= 0
	
	% The subtype TCC (at line 77, column 55) in decl recursiveListCreationBool for  l - 1
	% expected type  nat
	% The termination TCC (at line 77, column 29) in decl recursiveListCreationBool for
	%  recursiveListCreationBool(l - 1, seq_length + 1, seq)
	% The subtype TCC (at line 85, column 51) in decl recursiveListCreation for  l - 1
	% expected type  nat
	% The termination TCC (at line 85, column 29) in decl recursiveListCreation for
	%  recursiveListCreation(l - 1, seq_length + 1, seq)
	% Subtype TCC generated (at line 91, column 12) for  x
	% expected type  nat
	  % untried
	caseNnotgreaterthan1_innerfor_TCC1: OBLIGATION
	FORALL (seq_length: nat, x1: subrange(0, seq_length - 1)): x1 >= 0
	
	% The subtype TCC (at line 77, column 55) in decl recursiveListCreationBool for  l - 1
	    % expected type  nat
	  % is subsumed by append_loop_TCC1
	% The termination TCC (at line 77, column 29) in decl recursiveListCreationBool for
	    %  recursiveListCreationBool(l - 1, seq_length + 1, seq)
	  % is subsumed by append_loop_TCC2
	% The subtype TCC (at line 85, column 51) in decl recursiveListCreation for  l - 1
	    % expected type  nat
	  % is subsumed by append_loop_TCC1
	% The termination TCC (at line 85, column 29) in decl recursiveListCreation for
	    %  recursiveListCreation(l - 1, seq_length + 1, seq)
	  % is subsumed by append_loop_TCC2
	
	% Subtype TCC generated (at line 91, column 21) for  x + 1
	% expected type  nat
	  % untried
	caseNnotgreaterthan1_innerfor_TCC2: OBLIGATION
	FORALL (seq_length: nat, x1: subrange(0, seq_length - 1)): x1 + 1 >= 0
	
	% The subtype TCC (at line 111, column 12) in decl caseNnotgreaterthan1_accept for  x
	    % expected type  nat
	  % is subsumed by caseNnotgreaterthan1_innerfor_TCC1
	% The subtype TCC (at line 117, column 12) in decl caseNnotgreaterthan1_accept for  x
	    % expected type  nat
	  % is subsumed by caseNnotgreaterthan1_innerfor_TCC1

END algorithm3_TCCS