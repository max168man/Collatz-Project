%% TCCs associated with theory algorithm3
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm3_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 35, column 52) for  seq
	% expected type  sequence[nat]
	  % untried
	recursiveListCreationBool_TCC1: OBLIGATION
	FORALL (l: nat, seq: sequence[int], seq1: sequence[int]):
	    l = 0 AND seq1 = add(l, seq) IMPLIES FORALL (x1: nat): seq1(x1) >= 0
	
	% Subtype TCC generated (at line 37, column 55) for  l - 1
	% expected type  nat
	  % untried
	recursiveListCreationBool_TCC2: OBLIGATION
	FORALL (l: nat, seq: sequence[int]):
	    NOT l = 0 IMPLIES
	     FORALL (seq1: sequence[int]): seq1 = add(l, seq) IMPLIES l - 1 >= 0
	
	% Termination TCC generated (at line 37, column 29) for
	% recursiveListCreationBool(l - 1, seq_length + 1, seq)
	  % untried
	recursiveListCreationBool_TCC3: OBLIGATION
	FORALL (l: nat, seq: sequence[int]):
	    NOT l = 0 IMPLIES
	     FORALL (seq1: sequence[int]): seq1 = add(l, seq) IMPLIES l - 1 < l
	
	% Subtype TCC generated (at line 37, column 164) for  seq
	% expected type  sequence[nat]
	  % untried
	recursiveListCreationBool_TCC4: OBLIGATION
	FORALL (l: nat, v: [{z: [nat, nat, sequence[int]] | z`1 < l} -> bool],
	          seq_length: nat, seq: sequence[int]):
	    NOT l = 0 IMPLIES
	     FORALL (seq2: sequence[int]):
	       seq2 = add(l, seq) AND
	        v(l - 1, seq_length + 1, seq2) AND printstr("(For loop) ")
	        IMPLIES
	        FORALL (seq1: sequence[int]):
	          seq1 = add(l, seq2) IMPLIES FORALL (x1: nat): seq1(x1) >= 0
	
	% The subtype TCC (at line 45, column 51) in decl recursiveListCreation for  l - 1
	% expected type  nat
	% The termination TCC (at line 45, column 29) in decl recursiveListCreation for
	%  recursiveListCreation(l - 1, seq_length + 1, seq)
	% Subtype TCC generated (at line 74, column 8) for  n
	% expected type  naturalnumber
	  % untried
	recursiveFor_TCC1: OBLIGATION
	FORALL (n: int): n >= 0
	
	% The subtype TCC (at line 45, column 51) in decl recursiveListCreation for  l - 1
	    % expected type  nat
	  % is subsumed by recursiveListCreationBool_TCC2
	% The termination TCC (at line 45, column 29) in decl recursiveListCreation for
	    %  recursiveListCreation(l - 1, seq_length + 1, seq)
	  % is subsumed by recursiveListCreationBool_TCC3
	
	% Subtype TCC generated (at line 63, column 75) for  seq
	% expected type  sequence[nat]
	  % untried
	recursiveFor_TCC2: OBLIGATION
	FORALL (seq: sequence[int]):
	    printstr(concat("", newline)) AND printstr("Beginning list (1): ") IMPLIES
	     FORALL (x1: nat): seq(x1) >= 0
	
	% Termination TCC generated (at line 69, column 8) for
	% recursiveFor(n - 1, origN, Y_k, l, j, qj, add(l - x, seq),
	%              seq_length + 1)
	  % untried
	recursiveFor_TCC3: OBLIGATION
	FORALL (n: int, l: nat, seq: sequence[int], seq_length: nat):
	         printstr(concat("", newline)) AND printstr("Beginning list (1): ")
	     AND print_list(seq_length, seq) AND (n > 1)
	     AND printstr("case n > 1, n = ")
	     AND printstr(concat(real2str(n), newline))
	     IMPLIES
	     FORALL (x: subrange(0, l)):
	       printstr("x = ") AND
	        printstr(concat(real2str(l - x), newline)) AND
	         printstr("Beginning list: ")
	        IMPLIES n - 1 < n
	
	% The subtype TCC (at line 68, column 96) in decl recursiveFor for  seq
	% expected type  sequence[nat]
	% Termination TCC generated (at line 80, column 4) for
	% recursiveForEnhanced(n - 1, origN, Y_k, x, l, j, qj, add(l - x, seq),
	%                      seq_length + 1)
	  % untried
	recursiveForEnhanced_TCC1: OBLIGATION
	FORALL (n: int, x: nat): NOT n = 1 AND x >= 0 IMPLIES n - 1 < n
	
	% The subtype TCC (at line 68, column 96) in decl recursiveFor for  seq
	    % expected type  sequence[nat]
	  % is subsumed by recursiveFor_TCC2
	
	% Subtype TCC generated (at line 81, column 40) for  x - 1
	% expected type  nat
	  % untried
	recursiveForEnhanced_TCC2: OBLIGATION
	FORALL (n: int,
	          v:
	            [{z: [int, int, int, nat, nat, nat, nat, sequence[int], nat] |
	                z`1 < n} ->
	               boolean],
	          origN, Y_k: int, x, l, j, qj: nat, seq: sequence[int],
	          seq_length: nat):
	    NOT n = 1 AND
	     x >= 0 AND
	      v(n - 1, origN, Y_k, x, l, j, qj, add(l - x, seq), seq_length + 1)
	     IMPLIES x - 1 >= 0
	
	% Subtype TCC generated (at line 81, column 64) for  origN - n
	% expected type  nat
	  % untried
	recursiveForEnhanced_TCC3: OBLIGATION
	FORALL (n: int,
	          v:
	            [{z: [int, int, int, nat, nat, nat, nat, sequence[int], nat] |
	                z`1 < n} ->
	               boolean],
	          origN, Y_k: int, x, l, j, qj: nat, seq: sequence[int],
	          seq_length: nat):
	    NOT n = 1 AND
	     x >= 0 AND
	      v(n - 1, origN, Y_k, x, l, j, qj, add(l - x, seq), seq_length + 1)
	     IMPLIES origN - n >= 0
	
	% Termination TCC generated (at line 81, column 4) for
	% recursiveForEnhanced(n, origN, Y_k, x - 1, l, j, qj,
	%                      delete(origN - n, (add(l - x, seq))),
	%                      seq_length + 1)
	  % untried
	recursiveForEnhanced_TCC4: OBLIGATION
	FORALL (n: int,
	          v:
	            [{z: [int, int, int, nat, nat, nat, nat, sequence[int], nat] |
	                z`1 < n} ->
	               boolean],
	          origN, Y_k: int, x, l, j, qj: nat, seq: sequence[int],
	          seq_length: nat):
	    NOT n = 1 AND
	     x >= 0 AND
	      v(n - 1, origN, Y_k, x, l, j, qj, add(l - x, seq), seq_length + 1)
	     IMPLIES n < n

END algorithm3_TCCS