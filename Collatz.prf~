(Collatz
 (Fcltz_TCC1 0
  (Fcltz_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Fcltz subtype "number_fields./(Collatz.n, 2)" "nat")))
 (Pcltz_full_TCC1 0
  (Pcltz_full_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Pcltz_full subtype
    "(number_fields.-)((number_fields.*(3, Collatz.n)), 1)" "nat")))
 (Pcltz_full_TCC2 0
  (Pcltz_full_TCC2-1 nil 3927203796 ("" (termination-tcc) nil nil) nil
   nil
   (Pcltz_full termination
    "Collatz.Pcltz_full((number_fields.-)((number_fields.*(3, Collatz.n)), 1))"
    "nil")))
 (Pcltz_full_TCC3 0
  (Pcltz_full_TCC3-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (Pcltz_full subtype "number_fields./(Collatz.n, 2)" "nat")))
 (Pcltz_full_TCC4 0
  (Pcltz_full_TCC4-1 nil 3927203796 ("" (termination-tcc) nil nil) nil
   nil
   (Pcltz_full termination
    "Collatz.Pcltz_full(number_fields./(Collatz.n, 2))" "nil")))
 (lemma_even 0
  (lemma_even-1 nil 3927555796
   ("" (skeep) (("" (expand even?) (("" (grind) nil nil)) nil)) nil)
   ((even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lemma_odd 0
  (lemma_odd-1 nil 3927555884
   ("" (skeep) (("" (expand odd?) (("" (grind) nil nil)) nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lemma7_TCC1 0
  (lemma7_TCC1-1 nil 3927203796 ("" (subtype-tcc) nil nil) nil nil
   (lemma7 subtype
    "number_fields./(((number_fields.-)(exponentiation.^(2, (number_fields.*(2, Collatz.k))), 1)), 3)"
    "int")))
 (lemma9_TCC1 0
  (lemma9_TCC1-1 nil 3927555792 ("" (subtype-tcc) nil nil) nil nil
   (lemma9 subtype
    "number_fields./(((number_fields.-)((number_fields./(((number_fields.-)((exponentiation.^(2, (number_fields.*(2, Collatz.i)))), 1)), 3)), 1)), 3)"
    "int")))
 (lemma9_1_TCC1 0
  (lemma9_1_TCC1-1 nil 3927555792 ("" (subtype-tcc) nil nil) nil nil
   (lemma9_1 subtype
    "number_fields./(((number_fields.-)(number_fields./(Collatz.Yk(Collatz.i), 3), 1)), 3)"
    "int")))
 (lemma10 0
  (lemma10-1 nil 3927203988
   ("" (skeep)
    (("" (expand Fcltz)
      (("" (expand even?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((Fcltz const-decl "nat" Collatz nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil))
   shostak))
 (is_power_of_two_TCC1 0
  (is_power_of_two_TCC1-1 nil 3927555792 ("" (subtype-tcc) nil nil) nil
   nil (is_power_of_two subtype "Collatz.x" "naturalnumber")))
 (is_power_of_two_TCC2 0
  (is_power_of_two_TCC2-1 nil 3927555792 ("" (termination-tcc) nil nil)
   nil nil
   (is_power_of_two termination
    "Collatz.is_power_of_two(number_fields./(Collatz.x, 2))" "nil"))))

