%% TCCs associated with theory algorithm2mod
%% This file was automatically generated by PVS, please **do not modify** by hand.
algorithm2mod_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 29, column 55) for  (n - 1)
	% expected type  nat
	  % proved
	concatenate_recur_TCC1: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND l = FALSE IMPLIES (n - 1) >= 0
	
	% Termination TCC generated (at line 29, column 8) for
	% concatenate_recur(concat(str_base, num), num, (n - 1), FALSE)
	  % untried
	concatenate_recur_TCC2: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND l = FALSE IMPLIES (n - 1) < n
	
	% Subtype TCC generated (at line 32, column 55) for  (n - 1)
	% expected type  nat
	  % proved
	concatenate_recur_TCC3: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND NOT l = FALSE IMPLIES (n - 1) >= 0
	
	% Termination TCC generated (at line 32, column 8) for
	% concatenate_recur(concat(num, str_base), num, (n - 1), TRUE)
	  % untried
	concatenate_recur_TCC4: OBLIGATION
	FORALL (n: nat, l: bool): NOT n <= 0 AND NOT l = FALSE IMPLIES (n - 1) < n
	
	% The subtype TCC (at line 54, column 55) in decl concatenate_recur_mod for  (n - 1)
	% expected type  nat
	% The subtype TCC (at line 57, column 55) in decl concatenate_recur_mod for  (n - 1)
	% expected type  nat
	% Subtype TCC generated (at line 75, column 71) for  (j - 2)
	% expected type  nat
	  % proved
	case1_TCC1: OBLIGATION
	FORALL (j: nat): (j > 1) IMPLIES (j - 2) >= 0
	
	% The subtype TCC (at line 54, column 55) in decl concatenate_recur_mod for  (n - 1)
	    % expected type  nat
	  % is subsumed by concatenate_recur_TCC1
	% The subtype TCC (at line 57, column 55) in decl concatenate_recur_mod for  (n - 1)
	    % expected type  nat
	  % is subsumed by concatenate_recur_TCC3
	
	% The subtype TCC (at line 76, column 152) in decl case1 for  (j - 2)
	% expected type  nat
	% Subtype TCC generated (at line 95, column 24) for  (top - 1)
	% expected type  nat
	  % proved
	case2summation_TCC1: OBLIGATION
	FORALL (top: nat): NOT (top <= 1) IMPLIES (top - 1) >= 0
	
	% The subtype TCC (at line 76, column 152) in decl case1 for  (j - 2)
	    % expected type  nat
	  % is subsumed by case1_TCC1
	
	% Termination TCC generated (at line 95, column 8) for
	% case2summation((top - 1), (sum + (3 ^ top)))
	  % untried
	case2summation_TCC2: OBLIGATION
	FORALL (top: nat): NOT (top <= 1) IMPLIES (top - 1) < top
	
	% Subtype TCC generated (at line 138, column 12) for  t
	% expected type  naturalnumber
	  % untried
	case3subloop_TCC1: OBLIGATION
	FORALL (t: int): t >= 0
	
	% Termination TCC generated (at line 134, column 8) for
	% case3subloop(j, i, (t - 1), concat(str, "1"))
	  % untried
	case3subloop_TCC2: OBLIGATION
	FORALL (i, t: int): NOT t = -1 AND t = i IMPLIES (t - 1) < t
	
	% Termination TCC generated (at line 136, column 8) for
	% case3subloop(j, i, (t - 1), concat(str, "0"))
	  % untried
	case3subloop_TCC3: OBLIGATION
	FORALL (i, t: int): NOT t = -1 AND NOT t = i IMPLIES (t - 1) < t
	
	% Termination TCC generated (at line 179, column 8) for
	% case3mod(k, j, yk, str, count + 1)
	  % untried
	case3mod_TCC1: OBLIGATION
	FORALL (j, yk: int, count: nat):
	    NOT (count = j - 4) AND
	     verification(floor((((2 ^ (j - 2)) * (yk)) - (3 * (2 ^ count))) / 9),
	                  case3subloop(j, count, j - 3, ""),
	                  case3subloop(j, count, j - 3, "")`length)
	     IMPLIES count + 1 < count
	
	% The termination TCC (at line 189, column 27) in decl case3bool for
	%  case3bool(k, j, yk, str, count + 1)
	% Subtype TCC generated (at line 213, column 24) for  (i - 1)
	% expected type  nat
	  % proved
	c4xvalsum1_TCC1: OBLIGATION
	FORALL (i: nat): NOT i = 0 IMPLIES (i - 1) >= 0
	
	% Termination TCC generated (at line 213, column 8) for
	% c4xvalsum1(yk, (i - 1), sum + (2 * 3 ^ i))
	  % proved
	c4xvalsum1_TCC2: OBLIGATION
	FORALL (i: nat): NOT i = 0 IMPLIES (i - 1) < i
	
	% Subtype TCC generated (at line 221, column 27) for  (i - 1)
	% expected type  nat
	  % untried
	c4xvalsum2_TCC1: OBLIGATION
	FORALL (m: nat, i: nat): NOT i = m IMPLIES (i - 1) >= 0
	
	% Termination TCC generated (at line 221, column 8) for
	% c4xvalsum2(m, yk, (i - 1), sum + (3 ^ i))
	  % untried
	c4xvalsum2_TCC2: OBLIGATION
	FORALL (m: nat, i: nat): NOT i = m IMPLIES (i - 1) < i
	
	% Subtype TCC generated (at line 226, column 59) for  (j - 3)
	% expected type  nat
	  % untried
	case4xval_TCC1: OBLIGATION
	FORALL (j: int): (j - 3) >= 0
	
	% Subtype TCC generated (at line 226, column 4) for
	% ((4 * yk) - (c4xvalsum1(yk, m, 0) + c4xvalsum2(m, yk, (j - 3), 0))) /
	%  3 ^ (j - 2)
	% expected type  int
	  % untried
	case4xval_TCC2: OBLIGATION
	FORALL (m, j, yk: int):
	    integer_pred(((4 * yk) -
	                   (c4xvalsum1(yk, m, 0) + c4xvalsum2(m, yk, (j - 3), 0)))
	                  / 3 ^ (j - 2))
	
	% The subtype TCC (at line 226, column 32) in decl case4xval for  m
	% expected type  nat
	% The subtype TCC (at line 226, column 51) in decl case4xval for  m
	% expected type  nat
	% Subtype TCC generated (at line 264, column 47) for  (j - 3 - m)
	% expected type  nat
	  % untried
	casemnot0_TCC1: OBLIGATION
	FORALL (j, yk, m: int, x: int):
	    x = case4xval(m, j, yk) IMPLIES (j - 3 - m) >= 0
	
	% The subtype TCC (at line 226, column 32) in decl case4xval for  m
	    % expected type  nat
	  % is subsumed by case3subloop_TCC1
	% The subtype TCC (at line 226, column 51) in decl case4xval for  m
	    % expected type  nat
	  % is subsumed by case3subloop_TCC1
	
	% Subtype TCC generated (at line 265, column 47) for  (m)
	% expected type  nat
	  % untried
	casemnot0_TCC2: OBLIGATION
	FORALL (j, yk, m: int, str: string, x: int, str1: string):
	    x = case4xval(m, j, yk) AND
	     str1 = concatenate_recur(str, "1", (j - 3 - m), FALSE)
	     IMPLIES (m) >= 0
	
	% Subtype TCC generated (at line 269, column 47) for  (j - 3 - m)
	% expected type  nat
	  % untried
	casemnot0_TCC3: OBLIGATION
	FORALL (j, yk, m: int, str: string):
	    (LET x = case4xval(m, j, yk) IN
	       LET str = concatenate_recur(str, "1", (j - 3 - m), FALSE) IN
	         LET str = concatenate_recur(str, "1", (m), TRUE) IN
	           verification_portal(case4xval(m, j, yk), str))
	     AND
	     printstr("Correct Collatz number: ") AND
	      printstr(concat(real2str(case4xval(m, j, yk)), newline)) AND
	       printstr("Binary Vertification Code (BVC) for x is <")
	     IMPLIES (j - 3 - m) >= 0
	
	% Subtype TCC generated (at line 270, column 47) for  (m)
	% expected type  nat
	  % untried
	casemnot0_TCC4: OBLIGATION
	FORALL (j, yk, m: int, str: string):
	    (LET x = case4xval(m, j, yk) IN
	       LET str = concatenate_recur(str, "1", (j - 3 - m), FALSE) IN
	         LET str = concatenate_recur(str, "1", (m), TRUE) IN
	           verification_portal(case4xval(m, j, yk), str))
	     AND
	     printstr("Correct Collatz number: ") AND
	      printstr(concat(real2str(case4xval(m, j, yk)), newline)) AND
	       printstr("Binary Vertification Code (BVC) for x is <")
	     IMPLIES
	     FORALL (str1: string):
	       str1 = concatenate_recur(str, "1", (j - 3 - m), FALSE) IMPLIES (m) >= 0
	
	% Subtype TCC generated (at line 312, column 26) for
	% ((2 ^ (j - 1)) * (yk / 3))
	% expected type  int
	  % untried
	mainfor_TCC1: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	    (qj = 1) IMPLIES integer_pred(((2 ^ (j - 1)) * (yk / 3)))
	
	% Subtype TCC generated (at line 314, column 53) for  (j - 2)
	% expected type  nat
	  % untried
	mainfor_TCC2: OBLIGATION
	FORALL (j: int, qj: subrange(1, (j - 1))):
	    NOT (qj = 1) AND qj = j - 1 AND j > 1 IMPLIES (j - 2) >= 0
	
	% Subtype TCC generated (at line 314, column 25) for
	% ((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))
	% expected type  int
	  % untried
	mainfor_TCC3: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	    NOT (qj = 1) AND qj = j - 1 AND j > 1 IMPLIES
	     rational_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))) AND
	      integer_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1)))
	
	% Subtype TCC generated (at line 322, column 48) for  qj
	% expected type  nat
	  % untried
	mainfor_TCC4: OBLIGATION
	FORALL (j: int, qj: subrange(1, (j - 1))):
	         (NOT (qj = 1)) AND (NOT (qj = j - 1 AND j > 1))
	     AND (NOT (qj = 2 AND j > 2)) AND (NOT (qj = j - 2 AND j > 2))
	     AND printstr(concat("Case 2 < qj < j - 2", newline))
	     IMPLIES qj >= 0
	
	% Subtype TCC generated (at line 322, column 52) for  yk
	% expected type  nat
	  % untried
	mainfor_TCC5: OBLIGATION
	FORALL (j, yk: int, qj: subrange(1, (j - 1))):
	         (NOT (qj = 1)) AND (NOT (qj = j - 1 AND j > 1))
	     AND (NOT (qj = 2 AND j > 2)) AND (NOT (qj = j - 2 AND j > 2))
	     AND printstr(concat("Case 2 < qj < j - 2", newline))
	     IMPLIES yk >= 0
	
	% The subtype TCC (at line 312, column 55) in decl mainfor for  j
	% expected type  nat
	% The subtype TCC (at line 314, column 82) in decl mainfor for  j
	% expected type  nat
	% The subtype TCC (at line 322, column 45) in decl mainfor for  j
	% expected type  nat
	% Subtype TCC generated (at line 341, column 23) for  (2 ^ (2 * k) - 1)
	% expected type  int
	  % proved
	alg2_TCC1: OBLIGATION
	FORALL (k, j: int):
	    NOT (k < 2) AND NOT (j < 1) IMPLIES integer_pred((2 ^ (2 * k) - 1))
	
	% The subtype TCC (at line 312, column 55) in decl mainfor for  j
	    % expected type  nat
	  % is subsumed by case3subloop_TCC1
	% The subtype TCC (at line 314, column 82) in decl mainfor for  j
	    % expected type  nat
	  % is subsumed by case3subloop_TCC1
	% The subtype TCC (at line 322, column 45) in decl mainfor for  j
	    % expected type  nat
	  % is subsumed by case3subloop_TCC1
	
	% Subtype TCC generated (at line 361, column 18) for
	% ((2 ^ (j - 1)) * (yk / 3))
	% expected type  int
	  % untried
	theorem_14_1_TCC1: OBLIGATION
	FORALL (yk: int, j: nat | j > 1): integer_pred(((2 ^ (j - 1)) * (yk / 3)))
	
	% Subtype TCC generated (at line 361, column 68) for  ((2 ^ j) * (yk / 3))
	% expected type  int
	  % untried
	theorem_14_1_TCC2: OBLIGATION
	FORALL (k, yk: int, str: string, j: nat | j > 1):
	    case1(k, yk, ((2 ^ (j - 1)) * (yk / 3)), str, j) IMPLIES
	     integer_pred(((2 ^ j) * (yk / 3)))
	
	% Subtype TCC generated (at line 370, column 45) for  (j - 2)
	% expected type  nat
	  % proved
	theorem_14_2_TCC1: OBLIGATION
	FORALL (j: nat | j > 1): (j - 2) >= 0
	
	% Subtype TCC generated (at line 370, column 17) for
	% ((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))
	% expected type  int
	  % proved
	theorem_14_2_TCC2: OBLIGATION
	FORALL (yk: int, j: nat | j > 1):
	    rational_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1))) AND
	     integer_pred(((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1)))
	
	% Subtype TCC generated (at line 371, column 45) for  (j - 1)
	% expected type  nat
	  % untried
	theorem_14_2_TCC3: OBLIGATION
	FORALL (k, yk: int, j: nat | j > 1):
	    case2(k, yk, ((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1)), "",
	          j)
	     IMPLIES (j - 1) >= 0
	
	% Subtype TCC generated (at line 371, column 17) for
	% ((2 * yk) - case2summation((j - 1), 0)) / (3 ^ (j))
	% expected type  int
	  % untried
	theorem_14_2_TCC4: OBLIGATION
	FORALL (k, yk: int, j: nat | j > 1):
	    case2(k, yk, ((2 * yk) - case2summation((j - 2), 0)) / (3 ^ (j - 1)), "",
	          j)
	     IMPLIES
	     rational_pred(((2 * yk) - case2summation((j - 1), 0)) / (3 ^ (j))) AND
	      integer_pred(((2 * yk) - case2summation((j - 1), 0)) / (3 ^ (j)))

END algorithm2mod_TCCS