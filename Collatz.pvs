%------------------------------------------------------------------------
%
% Mechanical Verification of the Convergence Stairs of the Collatz Program
% Authors: Ali Ebnenasir <aebnenas@mtu.edu>, Maxwell Brainerd <mmbraine@mtu.edu>
% Date: 6/7/2024 - ongoing
%
% The goal of this page is to formally specify and mechanically verify the algorithmic method of [1] using the Prototype Verification System.
% While the correctness of convergence stairs has already been manually verified, we seek to verify they lack flaws. 
% A mechanical proof of correctness for the proposed convergence stairs will greatly aid in solving the Collatz Conjecture.
% Once we have verified the mechanical proofs of the  proposed Convergence stairs in [1], this will pave the way for us to prove the conjecture by showing that
% the union of stairs is equal to the set of natural values. 
% If we disprove this equality, we will identify a set of values where the Collatz Conjecture doesn't hold. 
%

%------------------------------------------------------------------------
Collatz: THEORY
BEGIN

%------------------------------------------------------------------------
% Imports
%------------------------------------------------------------------------

IMPORTING ints@divides % Used to check if a number there exists a number i such that x * i = y, in divides(x, y)
IMPORTING list % Used for various purposes
IMPORTING power@log

%------------------------------------------------------------------------
% Essential Defintions and Functions
%------------------------------------------------------------------------

Icltz:  TYPE = {1, 2, 4} % Set of natural values that is inevitably reached by repeated applications of the Collatz function.
Iu:     TYPE = {k: nat, i: posnat | i = 2^k} % Set of natural values, that when reached, inevitably boils down to Icltz. Could be considered a "weaker" version of Icltz.

%%% Fcltz(x)
%
%%%

Fcltz(n: nat): nat = IF even?(n) THEN n/2 ELSE (3*n) + 1 ENDIF

%%% Pcltz_full(x)
% This is the full Collatz function, recursively calling itself until it reaches one (at least, we think it'll reach one)
%%%

Pcltz_full(n: nat): RECURSIVE nat = IF n = 1 THEN 1 ELSIF odd?(n) THEN Pcltz_full((3 * n) - 1) ELSE Pcltz_full(n / 2) ENDIF MEASURE n

%%% R(x)
% This is a one-to-at-most-two relation, which computes the inverse of fc(x).
%%%

R(n: nat): real = IF odd?(n) THEN (n - 1) / 3 ELSE 2 * n ENDIF

%------------------------------------------------------------------------
% Theories, Problems, Lemmas, and Corollaries
%------------------------------------------------------------------------

%%% Problem 1
% Does program Pcltz self-stablize to I(u)) from any value in N (natural numbers)?
%%%

%%% Lemma 2
% All values in stair k + 1 are backward reachable by R(x) from all values in the k-th stair, where k >= 1. 
%%%

% Proof straightforward, hence omitted

%%% Lemma 3
% All values in stair k + 1 are backward reachable by R(x) from all values in the k-th stair, where k >= 1.
%%%

%%% Problem 4
% The set of backward reachable states from Icltz is complete. In other words, any positive integer not within Icltz belongs to some stair.
%%%

% Unsolved; Solving this would solve the Collatz conjecture.

%%% Problem 5
% Design a function stair: N -> 2^N that takes the index of a stair , and returns the set of states in that stair.
%%%

% Unsolved

%%% Problem 6
% Given a positive integer n not within Icltz, which stair would n be located in?
%%%

% Unsolved

%%% Lemma 7
% (2^(2k) - 1) is divisble by 3 and (2^(2k) - 1) / 3 is an odd value, for k > 0
%%%

lemma7: LEMMA FORALL (k: posnat): divides(3, (2^(2 * k) - 1)) = TRUE AND odd?((2^(2 * k) - 1) / 3) = TRUE

%%% Lemma 8
% (2^m - 1) is not divisible by 3 for odd values of m > 1
%%% 

% This type is an integer above 1 that is also odd. 
oddnat_overone: TYPE = {k: posint | odd?(k) = TRUE AND k > 1}

lemma8: LEMMA FORALL (k: oddnat_overone): divides(3, 2^k) = FALSE

%%% Lemma 9
% ((Yk/3 - 1) / 3) is not a valid Collatz number
%%% 

%Yk: TYPE = {k: posnat | 2^(2 * (k + 1)) - 1}

%%% Lemma 10
% No two subtrees intersect
%%% 

IMPORTING functions

% @QED lemma10 proved by mmbraine on Wed, 12 Jun 2024 18:00:53 GMT
lemma10: LEMMA FORALL (x1, x2: nat): Fcltz(x1) /= Fcltz(x2) => (x1 /= x2)
% Note: The definition for this is directly taken from line 264 in the prelude.
% Essentially, it is proving Fcltz is injective, which would mean no two numbers have the same
% result in Fcltz.

%%% Lemma 11
% For every term in the jth stair, f(j) + q(j) holds
%%% 

%%% Theorem 12
% Algorithm 1 is correct. It does not produce false positives or false negatives.
%%%

%%% Theorem 13
% The asymptotic time complexity of Algorithm 1 is linear in the length of s.
%%%

%%% Theorem 14
% Algorithm 2 is sound. It correctly explores the members of each stair j, for j > 0.
%%%

%%% Theorem 15
% Algorithm 2 is complete. It explores all Collatz numbers.
%%%

%%% Theorem 16
% The asymptotic time complexity of algorithm 2 for the j-th stair is O(j^(i + 1))
%%%

%%% Theorem 17
% Every state in the j-th stair, where j > 1, of a subtree rooted at Yk/3, for some k > 1, will reach a state in the (j - 1)th stair of that tree through
% repeated application of the Collatz function fc.
%%%

%%% Corollary 18
% Every state in the jth stair with respect to Iu will reach a state in the (j - 1)th stair through the execution of the Collatz program.
% Unsolved
%%%

%%% Theorem 19
% Starting from any state/value in any subtree rooted at Yk/3 for some arbitrary k > 1, the Collatz program will eventually reach a state in Iu, and subsequently reach Icltz.
% Unsolved
%%%

%------------------------------------------------------------------------
% Algorithms 1, 2, and 3
%------------------------------------------------------------------------

%%% Algorithm 1
% The verification algorithm
%%%
 % Under construction
%verification(x: posnat, l: string): bool =
 %   logResult: real = log(2)(x)
 %   IF x < 1 THEN FALSE ELSIF logResult
 %   
  %  ENDIF




%%% Algorithm 2
% An algorithm for specifying the members of the jth stair for a given value k > 1, along with constructing their binary verification code.
%%%

%%% Algorithm 3
% An algorithm for specifying the members of the jth stair for a given value k > 1, along with constructing their binary verification code.
%%%

END Collatz