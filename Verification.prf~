(Verification
 (power_of_TCC1 0
  (power_of_TCC1-1 nil 3929537622 ("" (grind) nil nil) nil nil
   (power_of subtype "Verification.n"
    "{i: integers.int | booleans.OR(Verification.base /= 0, reals.>=(i, 0))}")))
 (is_power_of_two_TCC1 0
  (is_power_of_two_TCC1-1 nil 3929538749 ("" (grind) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil
   (is_power_of_two subtype "number_fields./(Verification.x, 2)"
    "posnat")))
 (is_power_of_two_TCC2 0
  (is_power_of_two_TCC2-1 nil 3929538749 ("" (termination-tcc) nil nil)
   nil nil
   (is_power_of_two termination
    "Verification.is_power_of_two(number_fields./(Verification.x, 2))"
    "nil")))
 (lemma_power_two 0
  (lemma_power_two-1 nil 3929538824 ("" (postpone) nil nil) nil
   shostak))
 (lemma_power_two_base 0
  (lemma_power_two_base-1 nil 3930222996
   ("" (split)
    (("1" (grind) nil nil)
     ("2" (inst 1 0) (("2" (grind) nil nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (is_power_of_two def-decl "bool" Verification nil))
   shostak))
 (lemma_power_two_even 0
  (lemma_power_two_even-1 nil 3930223066
   ("" (skosimp*)
    (("" (inst 1 "x!1 / 2")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_power_of_two def-decl "bool" Verification nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (lemma_power_two_inductive 0
  (lemma_power_two_inductive-1 nil 3930223796
   ("" (skosimp*)
    (("" (split 1)
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (inst 1 "n!1 + 1")
        (("2" (assert)
          (("2" (expand is_power_of_two) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_power_of_two def-decl "bool" Verification nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (final_case_1_TCC1 0
  (final_case_1_TCC1-1 nil 3930410543 ("" (subtype-tcc) nil nil) nil
   nil (final_case_1 subtype "Verification.k" "nat")))
 (final_cases_TCC1 0
  (final_cases_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil nil
   (final_cases subtype "Verification.y" "posnat")))
 (y_calculation_TCC1 0
  (y_calculation_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (y_calculation subtype "((number_fields.-)(Verification.len, 1))"
    "nat")))
 (y_determination_TCC1 0
  (y_determination_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (y_determination subtype "(number_fields./(Verification.x, 2))"
    "int")))
 (verification_TCC1 0
  (verification_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil (verification subtype "Verification.x" "posnat")))
 (verification_TCC2 0
  (verification_TCC2-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (verification subtype
    "Verification.y_calculation(Verification.x, Verification.s, Verification.len)"
    "int")))
 (verification_TCC3 0
  (verification_TCC3-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (verification subtype "(number_fields.-)(Verification.len, 2)"
    "nat")))
 (verification_TCC4 0
  (verification_TCC4-1 nil 3929538824 ("" (termination-tcc) nil nil)
   nil nil
   (verification termination
    "Verification.verification(Verification.y_calculation(Verification.x, Verification.s, Verification.len), stdstr.substr(Verification.s, 0, (number_fields.-)(Verification.len, 2)), (number_fields.-)(Verification.len, 1))"
    "nil")))
 (stringreader_TCC1 0
  (stringreader_TCC1-1 nil 3930414764 ("" (subtype-tcc) nil nil) nil
   nil
   (stringreader subtype "(number_fields.-)(length(Verification.s), 1)"
    "nat")))
 (stringreader_TCC2 0
  (stringreader_TCC1-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (stringreader subtype
    "(number_fields./(((number_fields.-)(Verification.x, 1)), 3))"
    "int")))
 (stringreader_TCC3 0
  (stringreader_TCC2-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (stringreader subtype "(number_fields.-)(length(Verification.s), 2)"
    "nat")))
 (stringreader_TCC4 0
  (stringreader_TCC3-1 nil 3929538824 ("" (termination-tcc) nil nil)
   nil nil
   (stringreader termination
    "Verification.stringreader((number_fields./(((number_fields.-)(Verification.x, 1)), 3)), stdstr.substr(Verification.s, 0, (number_fields.-)(length(Verification.s), 2)))"
    "nil")))
 (stringreader_TCC5 0
  (stringreader_TCC4-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (stringreader subtype "(number_fields./(Verification.x, 2))"
    "int")))
 (stringreader_TCC6 0
  (stringreader_TCC5-1 nil 3929538824 ("" (subtype-tcc) nil nil) nil
   nil
   (stringreader subtype "(number_fields.-)(length(Verification.s), 2)"
    "nat")))
 (stringreader_TCC7 0
  (stringreader_TCC6-1 nil 3929538824 ("" (termination-tcc) nil nil)
   nil nil
   (stringreader termination
    "Verification.stringreader((number_fields./(Verification.x, 2)), stdstr.substr(Verification.s, 0, (number_fields.-)(length(Verification.s), 2)))"
    "nil")))
 (finalcase1_to_finalcases 0
  (finalcase1_to_finalcases-1 nil 3930414864
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (final_cases const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (finalcase2_to_finalcases 0
  (finalcase2_to_finalcases-1 nil 3930415072
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (finalcase3_to_finalcases 0
  (finalcase3_to_finalcases-1 nil 3930415085
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (final_case_3 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (finalcases_to_ydetermination_TCC1 0
  (finalcases_to_ydetermination_TCC1-1 nil 3930415456
   ("" (subtype-tcc) nil nil) nil nil
   (finalcases_to_ydetermination subtype
    "(number_fields./(Verification.x, 2))" "int")))
 (finalcases_to_ydetermination 0
  (finalcases_to_ydetermination-1 nil 3930415459
   ("" (skosimp*)
    (("" (expand y_determination) (("" (grind) nil nil)) nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (y_determination const-decl "bool" Verification nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (even? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_2 const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_cases const-decl "bool" Verification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   shostak))
 (y_determination_to_verification 0
  (y_determination_to_verification-1 nil 3930415583
   ("" (skosimp*)
    (("" (expand verification) (("" (grind) nil nil)) nil)) nil)
   ((verification def-decl "bool" Verification nil)) shostak))
 (finalcases_to_verification_TCC1 0
  (finalcases_to_verification_TCC1-1 nil 3930416241
   ("" (subtype-tcc) nil nil) nil nil
   (finalcases_to_verification subtype
    "(number_fields./(Verification.x, 2))" "int")))
 (finalcases_to_verification_TCC2 0
  (finalcases_to_verification_TCC2-1 nil 3930416241
   ("" (subtype-tcc) nil nil) nil nil
   (finalcases_to_verification subtype "Verification.len" "nat")))
 (finalcases_to_verification 0
  (finalcases_to_verification-1 nil 3930416241
   ("" (skosimp*)
    (("" (expand verification)
      (("" (expand y_determination) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((verification def-decl "bool" Verification nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (validate_string const-decl "bool" Verification nil)
    (final_cases const-decl "bool" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (y_calculation const-decl "real" Verification nil)
    (y_determination const-decl "bool" Verification nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (finalcase1_ydetcase1_to_verification_TCC1 0
  (finalcase1_ydetcase1_to_verification_TCC1-1 nil 3930418559
   ("" (subtype-tcc) nil nil) nil nil
   (finalcase1_ydetcase1_to_verification subtype "Verification.len"
    "nat")))
 (finalcase1_ydetcase1_to_verification 0
  (finalcase1_ydetcase1_to_verification-1 nil 3930418608
   ("" (postpone) nil nil) nil shostak))
 (finalcases1_to_verification 0
  (finalcases1_to_verification-1 nil 3930419255
   ("" (skeep)
    (("" (expand verification)
      (("" (expand y_determination)
        (("" (expand final_cases) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((verification def-decl "bool" Verification nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (final_cases const-decl "bool" Verification nil)
    (y_calculation const-decl "real" Verification nil)
    (final_case_3 const-decl "bool" Verification nil)
    (final_case_2 const-decl "bool" Verification nil)
    (odd? const-decl "bool" integers nil)
    (validate_string const-decl "bool" Verification nil)
    (final_case_1 const-decl "bool" Verification nil)
    (even? const-decl "bool" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (y_determination const-decl "bool" Verification nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (finalcases2_to_verification_TCC1 0
  (finalcases2_to_verification_TCC1-1 nil 3930419255
   ("" (subtype-tcc) nil nil) nil nil
   (finalcases2_to_verification subtype "Verification.len" "nat")))
 (finalcases3_to_verification_TCC1 0
  (finalcases3_to_verification_TCC1-1 nil 3930419255
   ("" (subtype-tcc) nil nil) nil nil
   (finalcases3_to_verification subtype "Verification.len" "nat")))
 (poweroftwo_to_verification_TCC1 0
  (poweroftwo_to_verification_TCC1-1 nil 3930420227
   ("" (subtype-tcc) nil nil) nil nil
   (poweroftwo_to_verification subtype "Verification.x" "posnat")))
 (poweroftwo_to_verification_TCC2 0
  (poweroftwo_to_verification_TCC2-1 nil 3930420227
   ("" (subtype-tcc) nil nil) nil nil
   (poweroftwo_to_verification subtype "Verification.len" "nat")))
 (poweroftwo_to_verification 0
  (poweroftwo_to_verification-1 nil 3930420227
   ("" (skosimp*)
    (("" (expand verification) (("" (grind) nil nil)) nil)) nil)
   ((verification def-decl "bool" Verification nil)) shostak))
 (verification_to_wrongcases_TCC1 0
  (verification_to_wrongcases_TCC1-1 nil 3930420227
   ("" (subtype-tcc) nil nil) nil nil
   (verification_to_wrongcases subtype "Verification.len" "nat"))))

